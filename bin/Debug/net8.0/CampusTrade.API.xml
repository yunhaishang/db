<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CampusTrade.API</name>
    </assembly>
    <members>
        <member name="M:CampusTrade.API.Controllers.AuthController.Login(CampusTrade.API.Models.DTOs.Auth.LoginWithDeviceRequest)">
            <summary>
            用户登录
            </summary>
            <param name="loginRequest">登录请求</param>
            <returns>完整的Token响应</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.AuthController.Register(CampusTrade.API.Models.DTOs.Auth.RegisterDto)">
            <summary>
            用户注册
            </summary>
            <param name="registerDto">注册信息</param>
            <returns>注册结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.AuthController.ValidateStudent(CampusTrade.API.Controllers.StudentValidationDto)">
            <summary>
            验证学生身份
            </summary>
            <param name="validationDto">验证信息</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.AuthController.GetUser(System.String)">
            <summary>
            获取用户信息
            </summary>
            <param name="username">用户名</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.AuthController.Logout(CampusTrade.API.Controllers.LogoutRequest)">
            <summary>
            退出登录
            </summary>
            <param name="logoutRequest">退出请求</param>
            <returns>退出结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.AuthController.LogoutAll">
            <summary>
            退出所有设备
            </summary>
            <returns>退出结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.AuthController.SendVerificationCode(CampusTrade.API.Controllers.SendCodeDto)">
            <summary>
            发送邮箱验证码
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.AuthController.VerifyCode(CampusTrade.API.Controllers.VerifyCodeDto)">
            <summary>
            验证邮箱验证码
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.AuthController.VerifyEmail(System.String)">
            <summary>
            处理邮箱验证链接（用户点击链接后调用）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.LogoutRequest">
            <summary>
            退出登录请求DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Controllers.LogoutRequest.RefreshToken">
            <summary>
            刷新令牌
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.StudentValidationDto">
            <summary>
            学生身份验证DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Controllers.StudentValidationDto.StudentId">
            <summary>
            学号
            </summary>
        </member>
        <member name="P:CampusTrade.API.Controllers.StudentValidationDto.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.SendCodeDto">
            <summary>
            发送验证码DTO
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.VerifyCodeDto">
            <summary>
            确认验证码DTO
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.CacheManagementController">
            <summary>
            缓存管理访问API
            包含缓存清理的多方位控制
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.GetCacheStats">
            <summary>
            获取缓存统计信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RemoveCacheItem(System.String)">
            <summary>
            清除指定缓存项
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RemoveUserCache(System.Int32)">
            <summary>
            清除用户缓存
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RemoveProductCache(System.Int32)">
            <summary>
            清除商品缓存
            </summary>
            <param name="productId">商品ID</param>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RemoveCategoryCache">
            <summary>
            清除分类缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RemoveConfigCache">
            <summary>
            清除系统配置缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RemoveByPrefix(System.String)">
            <summary>
            按前缀清除缓存
            </summary>
            <param name="prefix">缓存键前缀</param>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.ClearAllCache">
            <summary>
            清除所有缓存（谨慎使用）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RefreshCategoryCache">
            <summary>
            手动刷新分类缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RefreshProductCache">
            <summary>
            手动刷新商品缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.CacheManagementController.RefreshConfigCache">
            <summary>
            手动刷新配置缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.DashboardController.GetDashboardStatistics(System.Int32,System.Int32)">
            <summary>
            获取数据报表统计数据
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.DashboardController.ExportToExcel(System.Int32)">
            <summary>
            导出Excel报表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.DashboardController.ExportToPdf(System.Int32)">
            <summary>
            导出PDF报表
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.FileUrlRequest">
            <summary>
            文件URL请求
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.BatchFileUrlRequest">
            <summary>
            批量文件URL请求
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.FileController">
            <summary>
            文件管理控制器
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.UploadProductImage(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传商品图片
            </summary>
            <param name="file">图片文件</param>
            <returns>上传结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.UploadReportEvidence(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传举报证据
            </summary>
            <param name="file">证据文件</param>
            <returns>上传结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.UploadAvatar(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            上传用户头像
            </summary>
            <param name="file">头像文件</param>
            <returns>上传结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.DownloadFile(System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件流</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.DownloadFileByUrl(CampusTrade.API.Controllers.FileUrlRequest)">
            <summary>
            通过URL下载文件
            </summary>
            <param name="request">包含文件URL的请求</param>
            <returns>文件流</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.PreviewFile(System.String,System.String)">
            <summary>
            预览文件（直接访问）
            </summary>
            <param name="fileType">文件类型</param>
            <param name="fileName">文件名</param>
            <returns>文件流</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName">文件名</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.DeleteFileByUrl(CampusTrade.API.Controllers.FileUrlRequest)">
            <summary>
            通过URL删除文件
            </summary>
            <param name="request">包含文件URL的请求</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.DeleteFiles(System.Collections.Generic.List{System.String})">
            <summary>
            批量删除文件
            </summary>
            <param name="fileNames">文件名列表</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.DeleteFilesByUrl(CampusTrade.API.Controllers.BatchFileUrlRequest)">
            <summary>
            通过URL批量删除文件
            </summary>
            <param name="request">包含文件URL列表的请求</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.CheckFileExists(System.String)">
            <summary>
            检查文件是否存在
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.CheckFileExistsByUrl(CampusTrade.API.Controllers.FileUrlRequest)">
            <summary>
            通过URL检查文件是否存在
            </summary>
            <param name="request">包含文件URL的请求</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件信息</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.GetFileInfoByUrl(CampusTrade.API.Controllers.FileUrlRequest)">
            <summary>
            通过URL获取文件信息
            </summary>
            <param name="request">包含文件URL的请求</param>
            <returns>文件信息</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.BatchUploadFiles(System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile},System.String)">
            <summary>
            批量上传文件
            </summary>
            <param name="files">文件列表</param>
            <param name="fileType">文件类型</param>
            <returns>批量上传结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.ExtractFileNameFromUrl(CampusTrade.API.Controllers.FileUrlRequest)">
            <summary>
            从URL提取文件名
            </summary>
            <param name="request">包含文件URL的请求</param>
            <returns>文件名</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.BatchCheckFileExistsByUrl(CampusTrade.API.Controllers.BatchFileUrlRequest)">
            <summary>
            批量检查文件是否存在（通过URL）
            </summary>
            <param name="request">包含文件URL列表的请求</param>
            <returns>批量检查结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.GetAllFiles(System.String)">
            <summary>
            获取所有文件列表
            </summary>
            <param name="fileType">文件类型（可选）</param>
            <returns>文件列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.FileController.GetFileStats">
            <summary>
            获取文件统计信息
            </summary>
            <returns>文件统计信息</returns>
        </member>
        <member name="T:CampusTrade.API.Controllers.HealthController">
            <summary>
            健康检查控制器
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.HealthController.HealthCheck">
            <summary>
            健康检查端点
            </summary>
            <returns>健康状态</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.HomeController.GetStatus">
            <summary>
            获取API状态信息
            </summary>
            <returns>API状态</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.HomeController.GetHealth">
            <summary>
            获取健康检查信息
            </summary>
            <returns>健康状态</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.HomeController.GetInfo">
            <summary>
            获取API信息
            </summary>
            <returns>API信息</returns>
        </member>
        <member name="T:CampusTrade.API.Controllers.NotificationController">
            <summary>
            通知控制器 - 用于测试通知系统
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.NotificationController.CreateNotification(CampusTrade.API.Controllers.CreateNotificationRequest)">
            <summary>
            测试创建通知
            </summary>
            <param name="request">通知创建请求</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.NotificationController.GetQueueStats">
            <summary>
            获取通知队列状态
            </summary>
            <returns>队列状态统计</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.NotificationController.ProcessQueue">
            <summary>
            手动触发队列处理
            </summary>
            <returns>处理结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.NotificationController.GetUserNotifications(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取用户通知历史
            </summary>
            <param name="userId">用户ID</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <returns>通知历史</returns>
        </member>
        <member name="T:CampusTrade.API.Controllers.CreateNotificationRequest">
            <summary>
            创建通知请求模型
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.ProductController">
            <summary>
            商品管理控制器
            </summary>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.CreateProduct(CampusTrade.API.Models.DTOs.Product.CreateProductDto)">
            <summary>
            发布商品
            </summary>
            <param name="createDto">创建商品请求</param>
            <returns>商品详情</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.UpdateProduct(System.Int32,CampusTrade.API.Models.DTOs.Product.UpdateProductDto)">
            <summary>
            更新商品信息
            </summary>
            <param name="productId">商品ID</param>
            <param name="updateDto">更新商品请求</param>
            <returns>更新后的商品详情</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.DeleteProduct(System.Int32)">
            <summary>
            删除商品（下架）
            </summary>
            <param name="productId">商品ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetProductDetail(System.Int32)">
            <summary>
            获取商品详情
            </summary>
            <param name="productId">商品ID</param>
            <returns>商品详情</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.UpdateProductStatus(System.Int32,System.String)">
            <summary>
            修改商品状态
            </summary>
            <param name="productId">商品ID</param>
            <param name="status">新状态</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetProducts(CampusTrade.API.Models.DTOs.Product.ProductQueryDto)">
            <summary>
            分页查询商品列表
            </summary>
            <param name="queryDto">查询条件</param>
            <returns>分页商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.SearchProducts(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            搜索商品
            </summary>
            <param name="keyword">搜索关键词</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="categoryId">分类ID</param>
            <returns>搜索结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetPopularProducts(System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取热门商品
            </summary>
            <param name="count">获取数量</param>
            <param name="categoryId">分类ID</param>
            <returns>热门商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetUserProducts(System.Nullable{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            获取用户发布的商品
            </summary>
            <param name="userId">用户ID（可选，不传则获取当前用户的商品）</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="status">商品状态</param>
            <returns>用户商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetCategoryTree(System.Boolean)">
            <summary>
            获取分类树
            </summary>
            <param name="includeProductCount">是否包含商品数量</param>
            <returns>分类树</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetSubCategories(System.Nullable{System.Int32})">
            <summary>
            获取子分类列表
            </summary>
            <param name="parentId">父分类ID（null表示获取一级分类）</param>
            <returns>子分类列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetCategoryBreadcrumb(System.Int32)">
            <summary>
            获取分类面包屑导航
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>面包屑导航</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetProductsByCategory(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取分类下的商品
            </summary>
            <param name="categoryId">分类ID</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="includeSubCategories">是否包含子分类</param>
            <returns>分类商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetProductsToAutoRemove(System.Int32)">
            <summary>
            获取即将自动下架的商品
            </summary>
            <param name="days">距离下架天数</param>
            <returns>即将下架的商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.ExtendProductAutoRemoveTime(System.Int32,System.Int32)">
            <summary>
            延期商品下架时间
            </summary>
            <param name="productId">商品ID</param>
            <param name="extendDays">延期天数</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ProductController.GetCurrentUserId">
            <summary>
            获取当前登录用户ID
            </summary>
            <returns>用户ID</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ScheduledTaskController.GetTaskStatus">
            <summary>
            获取所有定时任务状态
            </summary>
            <returns>任务状态列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ScheduledTaskController.GetTaskDetail(System.String)">
            <summary>
            获取特定任务的详细信息
            </summary>
            <param name="taskName">任务名称</param>
            <returns>任务详细信息</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.ScheduledTaskController.GetSystemHealth">
            <summary>
            获取系统健康状态（包含定时任务监控）
            </summary>
            <returns>系统健康状态</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.TokenController.RefreshToken(CampusTrade.API.Models.DTOs.Auth.RefreshTokenRequest)">
            <summary>
            刷新访问令牌
            </summary>
            <param name="refreshRequest">刷新请求</param>
            <returns>新的Token响应</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.TokenController.ValidateToken(CampusTrade.API.Controllers.ValidateTokenRequest)">
            <summary>
            验证访问令牌
            </summary>
            <param name="validateRequest">验证请求</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.TokenController.RevokeToken(CampusTrade.API.Models.DTOs.Auth.RevokeTokenRequest)">
            <summary>
            撤销刷新令牌
            </summary>
            <param name="revokeRequest">撤销请求</param>
            <returns>撤销结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.TokenController.GetActiveTokens">
            <summary>
            获取用户的活跃令牌列表
            </summary>
            <returns>活跃令牌列表</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.TokenController.CleanupExpiredTokens">
            <summary>
            清理过期的令牌（管理员功能）
            </summary>
            <returns>清理结果</returns>
        </member>
        <member name="M:CampusTrade.API.Controllers.TokenController.CheckBlacklist(CampusTrade.API.Controllers.CheckBlacklistRequest)">
            <summary>
            检查Token是否在黑名单中
            </summary>
            <param name="checkRequest">检查请求</param>
            <returns>检查结果</returns>
        </member>
        <member name="T:CampusTrade.API.Controllers.ValidateTokenRequest">
            <summary>
            Token验证请求DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Controllers.ValidateTokenRequest.AccessToken">
            <summary>
            访问令牌
            </summary>
        </member>
        <member name="T:CampusTrade.API.Controllers.CheckBlacklistRequest">
            <summary>
            黑名单检查请求DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Controllers.CheckBlacklistRequest.Jti">
            <summary>
            JWT ID
            </summary>
        </member>
        <member name="T:CampusTrade.API.Data.DatabasePerformanceInterceptor">
            <summary>
            数据库性能拦截器，用于记录慢查询日志
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions">
            <summary>
            服务注册扩展
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions.AddJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加JWT认证服务
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions.AddRepositoryServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加Repository和数据访问服务
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions.AddAuthenticationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加认证相关服务
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions.AddSignalRSupport(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加SignalR支持
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions.AddCorsPolicy(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加CORS策略
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions.AddBackgroundServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加后台服务
            </summary>
            <param name="services">服务集合</param>
            <returns>服务集合</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions.AddFileManagementServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加文件管理服务
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Extensions.ServiceCollectionExtensions.AddProductServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加商品相关服务
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Extensions.JwtOptionsValidator">
            <summary>
            JWT选项验证器
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Extensions.FileStorageOptionsValidator">
            <summary>
            文件存储选项验证器
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Middleware.GlobalExceptionMiddleware">
            <summary>
            全局异常处理中间件
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Middleware.GlobalExceptionMiddlewareExtensions">
            <summary>
            全局异常处理中间件扩展
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.GlobalExceptionMiddlewareExtensions.UseGlobalExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用全局异常处理中间件
            </summary>
            <param name="builder">应用程序构建器</param>
            <returns>应用程序构建器</returns>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Middleware.JwtValidationMiddleware">
            <summary>
            JWT验证中间件
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Middleware.JwtValidationMiddlewareExtensions">
            <summary>
            JWT验证中间件扩展
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.JwtValidationMiddlewareExtensions.UseJwtValidation(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用JWT验证中间件
            </summary>
            <param name="builder">应用程序构建器</param>
            <returns>应用程序构建器</returns>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Middleware.SecurityHeadersMiddleware">
            <summary>
            安全头中间件
            添加必要的安全响应头
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Middleware.SecurityHeadersMiddlewareExtensions">
            <summary>
            安全头中间件扩展
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware">
            <summary>
            安全检查中间件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.GetClientIPAddress(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取客户端真实IP地址
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.IsIPBlocked(System.String)">
            <summary>
            检查IP是否被阻止
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.IsSuspiciousUserAgent(System.String)">
            <summary>
            检查是否为可疑UserAgent
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.IsRateLimited(System.String,System.String)">
            <summary>
            速率限制检查
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.IsLoginRateLimited(System.String)">
            <summary>
            登录速率限制检查
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.IsLoginEndpoint(System.String)">
            <summary>
            检查是否为登录端点
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.IsMaliciousPath(System.String)">
            <summary>
            检查是否为恶意路径
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.LogSecurityEvent(System.String,System.String,System.String,System.String)">
            <summary>
            记录安全事件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddleware.HandleBlocked(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)">
            <summary>
            处理被阻止的请求
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Middleware.SecurityMiddlewareExtensions">
            <summary>
            安全中间件扩展
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Middleware.SecurityMiddlewareExtensions.UseSecurity(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用安全检查中间件
            </summary>
            <param name="builder">应用程序构建器</param>
            <returns>应用程序构建器</returns>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper">
            <summary>
            缓存键生成器（统一命名规范）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.ProductKey(System.Int32)">
            <summary>
            生成商品缓存键
            </summary>
            <param name="productId">商品ID</param>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.ProductListKey(System.Nullable{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            生成商品列表键（带分页和分类筛选）
            </summary>
            <param name="categoryId">分类ID（可选）</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页数量</param>
            <param name="sortBy">排序字段</param>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.ProductStatsKey(System.Int32)">
            <summary>
            生成商品统计信息键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.UserKey(System.Int32)">
            <summary>
            生成用户信息键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.UserPermissionsKey(System.Int32)">
            <summary>
            生成用户权限键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.CategoryTreeKey">
            <summary>
            生成分类树缓存键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.CategoryChildrenKey(System.Int32)">
            <summary>
            生成分类子项列表键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.ConfigKey(System.String)">
            <summary>
            生成系统配置键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.UserSecurityKey(System.Int32)">
            <summary>
            生成用户安全信息键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.UserByUsernameKey(System.String)">
            <summary>
            生成根据用户名/邮箱查询用户的缓存键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.StudentValidationKey(System.String,System.String)">
            <summary>
            生成学生验证缓存键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.GetUserCachePrefix(System.Int32)">
            <summary>
            获取用户相关缓存键前缀（用于批量删除）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.GetStudentValidationPrefix">
            <summary>
            获取学生验证缓存键前缀
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.IsValidKey(System.String)">
            <summary>
            验证键合法性（防止注入）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.TryExtractId(System.String,System.String,System.Int32@)">
            <summary>
            提取键中的业务ID（反向解析）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.GetCategoryProductsCachePrefix(System.Int32)">
            <summary>
            生成分类产品列表缓存键前缀（用于批量删除）
            格式：CT_product:list:cat:{categoryId}:
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.GetConfigKeysPrefix">
            <summary>
            获取所有配置缓存键的完整前缀
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.IsConfigKey(System.String)">
            <summary>
            判断一个缓存键是否是配置键
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Cache.CacheKeyHelper.TryExtractConfigName(System.String,System.String@)">
            <summary>
            从完整缓存键中提取原始配置名
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.DeviceDetector.GetDeviceType(System.String)">
            <summary>
            从UserAgent解析设备类型（Mobile/PC/Tablet）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Utils.Notificate.NotificationExtensions">
            <summary>
            通知实体扩展方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Notificate.NotificationExtensions.GetRenderedContent(CampusTrade.API.Models.Entities.Notification)">
            <summary>
            获取渲染后的通知内容
            </summary>
            <param name="notification">通知实体</param>
            <returns>渲染后的内容</returns>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Utils.Notificate.Notifihelper">
            <summary>
            通知模板参数替换工具
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Notificate.Notifihelper.ReplaceTemplateParams(System.String,System.String)">
            <summary>
            用参数字典替换模板内容中的占位符
            </summary>
            <param name="templateContent">模板内容（如"你好，{username}，你的订单号是{orderNo}"）</param>
            <param name="templateParamsJson">模板参数（JSON格式）</param>
            <returns>替换后的内容</returns>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Utils.Performance.PerformanceTracker">
            <summary>
            业务操作性能追踪器，用于记录单个业务流程或子操作的耗时日志
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Performance.PerformanceTracker.AddContext(System.String,System.Object)">
            <summary>
            添加额外上下文字段（例如用户ID、订单号等）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Performance.PerformanceTracker.GetPerformanceThreshold(System.String)">
            <summary>
            可根据不同业务操作名设定不同阈值
            </summary>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Utils.Security.SecurityHelper">
            <summary>
            安全相关工具类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.SecurityHelper.GenerateSecretKey(System.Int32)">
            <summary>
            生成随机密钥
            </summary>
            <param name="length">密钥长度（字节）</param>
            <returns>Base64编码的密钥</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.SecurityHelper.GenerateRandomToken(System.Int32)">
            <summary>
            生成随机Token
            </summary>
            <param name="length">Token长度（字节）</param>
            <returns>Hex格式的Token</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.SecurityHelper.GenerateGuidToken">
            <summary>
            生成GUID格式的Token
            </summary>
            <returns>GUID字符串</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.SecurityHelper.ComputeSha256Hash(System.String)">
            <summary>
            计算字符串的SHA256哈希值
            </summary>
            <param name="input">输入字符串</param>
            <returns>Hex格式的哈希值</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.SecurityHelper.GenerateJwtId">
            <summary>
            生成JWT JTI（JWT ID）
            </summary>
            <returns>JWT JTI</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.SecurityHelper.GenerateDeviceFingerprint(System.String,System.String)">
            <summary>
            生成设备指纹
            </summary>
            <param name="userAgent">用户代理</param>
            <param name="ipAddress">IP地址</param>
            <returns>设备指纹</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.SecurityHelper.ObfuscateSensitive(System.String,System.Int32)">
            <summary>
            混淆敏感信息（用于日志）
            </summary>
            <param name="sensitive">敏感信息</param>
            <param name="showLength">显示的字符数</param>
            <returns>混淆后的字符串</returns>
        </member>
        <member name="T:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper">
            <summary>
            Token操作工具类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.GetUserIdFromToken(System.String)">
            <summary>
            从JWT Token中提取用户ID
            </summary>
            <param name="token">JWT Token</param>
            <returns>用户ID，如果提取失败返回null</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.GetClaimsFromToken(System.String)">
            <summary>
            从JWT Token中提取所有Claims
            </summary>
            <param name="token">JWT Token</param>
            <returns>Claims集合</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.GetExpirationFromToken(System.String)">
            <summary>
            从Token中获取过期时间
            </summary>
            <param name="token">JWT Token</param>
            <returns>过期时间</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.GetJtiFromToken(System.String)">
            <summary>
            从Token中获取JTI（JWT ID）
            </summary>
            <param name="token">JWT Token</param>
            <returns>JWT ID</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.CreateSecurityKey(System.String)">
            <summary>
            创建SecurityKey
            </summary>
            <param name="secretKey">密钥</param>
            <returns>SecurityKey</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.CreateSigningCredentials(System.String)">
            <summary>
            创建SigningCredentials
            </summary>
            <param name="secretKey">密钥</param>
            <returns>SigningCredentials</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.CreateTokenValidationParameters(CampusTrade.API.Options.JwtOptions)">
            <summary>
            创建TokenValidationParameters
            </summary>
            <param name="jwtOptions">JWT配置</param>
            <returns>TokenValidationParameters</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.ValidateToken(System.String,CampusTrade.API.Options.JwtOptions)">
            <summary>
            验证Token签名和基本格式
            </summary>
            <param name="token">JWT Token</param>
            <param name="jwtOptions">JWT配置</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.ExtractUserInfo(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            从ClaimsPrincipal中提取用户信息
            </summary>
            <param name="principal">ClaimsPrincipal</param>
            <returns>用户信息</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.CreateUserClaims(System.Int32,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            创建自定义Claims列表
            </summary>
            <param name="userId">用户ID</param>
            <param name="username">用户名</param>
            <param name="email">邮箱</param>
            <param name="studentId">学号</param>
            <param name="additionalClaims">额外的Claims</param>
            <returns>Claims列表</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.RevokeRefreshToken(CampusTrade.API.Models.Entities.RefreshToken,System.String,System.Nullable{System.Int32})">
            <summary>
            撤销刷新令牌
            </summary>
            <param name="token">刷新令牌实体</param>
            <param name="reason">撤销原因</param>
            <param name="revokedBy">撤销者ID</param>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.IsRefreshTokenValid(CampusTrade.API.Models.Entities.RefreshToken)">
            <summary>
            判断刷新令牌是否有效
            </summary>
            <param name="token">刷新令牌实体</param>
            <returns>是否有效</returns>
        </member>
        <member name="M:CampusTrade.API.Infrastructure.Utils.Security.TokenHelper.UpdateRefreshTokenLastUsed(CampusTrade.API.Models.Entities.RefreshToken)">
            <summary>
            更新刷新令牌的最后使用时间
            </summary>
            <param name="token">刷新令牌实体</param>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Auth.RegisterDto">
            <summary>
            用户注册请求DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RegisterDto.StudentId">
            <summary>
            学号
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RegisterDto.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RegisterDto.Email">
            <summary>
            邮箱地址
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RegisterDto.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RegisterDto.ConfirmPassword">
            <summary>
            确认密码
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RegisterDto.Username">
            <summary>
            用户名（可选）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RegisterDto.Phone">
            <summary>
            手机号（可选）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Auth.RefreshTokenRequest">
            <summary>
            Token刷新请求模型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RefreshTokenRequest.RefreshToken">
            <summary>
            待刷新的RefreshToken
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RefreshTokenRequest.DeviceId">
            <summary>
            设备标识
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RefreshTokenRequest.IpAddress">
            <summary>
            客户端IP地址（可选，服务器端也会自动获取）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RefreshTokenRequest.UserAgent">
            <summary>
            用户代理信息（可选，服务器端也会自动获取）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RefreshTokenRequest.EnableRotation">
            <summary>
            是否启用Token轮换（覆盖服务器配置）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Auth.LoginWithDeviceRequest">
            <summary>
            用户登录请求
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.LoginWithDeviceRequest.Username">
            <summary>
            用户名或邮箱
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.LoginWithDeviceRequest.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.LoginWithDeviceRequest.DeviceId">
            <summary>
            设备标识
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.LoginWithDeviceRequest.DeviceName">
            <summary>
            设备名称
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.LoginWithDeviceRequest.RememberMe">
            <summary>
            是否记住登录（影响Token过期时间）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Auth.RevokeTokenRequest">
            <summary>
            Token撤销请求模型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RevokeTokenRequest.Token">
            <summary>
            待撤销的Token
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RevokeTokenRequest.Reason">
            <summary>
            撤销原因
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.RevokeTokenRequest.RevokeAll">
            <summary>
            是否撤销所有Token（该用户的所有设备）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Auth.TokenResponse">
            <summary>
            Token响应模型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.AccessToken">
            <summary>
            访问令牌
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.RefreshToken">
            <summary>
            刷新令牌
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.TokenType">
            <summary>
            令牌类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.ExpiresIn">
            <summary>
            过期秒数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.ExpiresAt">
            <summary>
            具体过期时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.StudentId">
            <summary>
            学号
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.CreditScore">
            <summary>
            信用分
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.DeviceId">
            <summary>
            设备标识
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.UserStatus">
            <summary>
            用户状态
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.EmailVerified">
            <summary>
            是否需要验证邮箱
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.TwoFactorEnabled">
            <summary>
            是否启用双因子认证
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenResponse.RefreshExpiresAt">
            <summary>
            刷新令牌过期时间
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Auth.TokenValidationResponse">
            <summary>
            Token验证响应模型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenValidationResponse.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenValidationResponse.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenValidationResponse.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenValidationResponse.ExpiresAt">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Auth.TokenValidationResponse.Permissions">
            <summary>
            权限列表
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Common.ApiResponse`1">
            <summary>
            通用API响应模型
            </summary>
            <typeparam name="T">响应数据类型</typeparam>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Common.ApiResponse`1.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Common.ApiResponse`1.Message">
            <summary>
            响应消息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Common.ApiResponse`1.Data">
            <summary>
            响应数据
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Common.ApiResponse`1.ErrorCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Common.ApiResponse`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Common.ApiResponse`1.CreateSuccess(`0,System.String)">
            <summary>
            创建成功响应
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Common.ApiResponse`1.CreateError(System.String,System.String)">
            <summary>
            创建失败响应
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Common.ApiResponse">
            <summary>
            无数据的API响应模型
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Common.ApiResponse.CreateSuccess(System.String)">
            <summary>
            创建成功响应
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Common.ApiResponse.CreateError(System.String,System.String)">
            <summary>
            创建失败响应
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.NotificationSendResult">
            <summary>
            通知发送结果结构
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.File.FileUploadRequestDto">
            <summary>
            文件上传请求DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadRequestDto.FileType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadRequestDto.GenerateThumbnail">
            <summary>
            是否生成缩略图
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadRequestDto.Description">
            <summary>
            文件描述
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto">
            <summary>
            文件上传响应DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.FileUrl">
            <summary>
            文件URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.ThumbnailFileName">
            <summary>
            缩略图文件名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.ThumbnailUrl">
            <summary>
            缩略图URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.ContentType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.FormattedFileSize">
            <summary>
            格式化的文件大小
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileUploadResponseDto.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.File.FileInfoDto">
            <summary>
            文件信息DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.FormattedFileSize">
            <summary>
            格式化的文件大小
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.ContentType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.ModifiedAt">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.FileUrl">
            <summary>
            文件URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.ThumbnailUrl">
            <summary>
            缩略图URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.IsImage">
            <summary>
            是否为图片
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.IsVideo">
            <summary>
            是否为视频
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.FileInfoDto.IsDocument">
            <summary>
            是否为文档
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.File.BatchFileUploadResponseDto">
            <summary>
            批量文件上传响应DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.BatchFileUploadResponseDto.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.BatchFileUploadResponseDto.Results">
            <summary>
            文件上传结果列表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.BatchFileUploadResponseDto.TotalCount">
            <summary>
            总文件数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.BatchFileUploadResponseDto.SuccessCount">
            <summary>
            成功上传数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.File.BatchFileUploadResponseDto.FailureCount">
            <summary>
            失败上传数
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.CategoryDto">
            <summary>
            分类响应DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryDto.Name">
            <summary>
            分类名称
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryDto.ParentId">
            <summary>
            父分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryDto.Level">
            <summary>
            分类层级（1=一级分类，2=二级分类，3=三级分类）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryDto.FullPath">
            <summary>
            完整分类路径
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryDto.Children">
            <summary>
            子分类列表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryDto.ProductCount">
            <summary>
            该分类下的商品数量
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryDto.ActiveProductCount">
            <summary>
            该分类下的活跃商品数量
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.CategoryTreeDto">
            <summary>
            分类树响应DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryTreeDto.RootCategories">
            <summary>
            一级分类列表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryTreeDto.TotalCount">
            <summary>
            总分类数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryTreeDto.LastUpdateTime">
            <summary>
            最后更新时间
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.CategoryBreadcrumbDto">
            <summary>
            分类面包屑导航DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryBreadcrumbDto.Breadcrumb">
            <summary>
            分类路径
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.CategoryBreadcrumbItemDto">
            <summary>
            分类面包屑项DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryBreadcrumbItemDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryBreadcrumbItemDto.Name">
            <summary>
            分类名称
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryBreadcrumbItemDto.Level">
            <summary>
            分类层级
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.PredefinedCategories">
            <summary>
            预定义分类 - 三级分类体系
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.TEXTBOOK">
            <summary>
            一级分类：教材
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.DIGITAL">
            <summary>
            一级分类：数码
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.DAILY">
            <summary>
            一级分类：日用
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.GetRootCategories">
            <summary>
            获取所有一级分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.GetTextbookSubCategories">
            <summary>
            获取教材类的二级分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.GetDigitalSubCategories">
            <summary>
            获取数码类的二级分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.GetDailySubCategories">
            <summary>
            获取日用类的二级分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.GetTextbookThirdLevelCategories">
            <summary>
            获取教材类的三级分类示例（按二级分类）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.GetDigitalThirdLevelCategories">
            <summary>
            获取数码类的三级分类示例（按二级分类）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.GetDailyThirdLevelCategories">
            <summary>
            获取日用类的三级分类示例（按二级分类）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.DTOs.Product.PredefinedCategories.GetThirdLevelCategories(System.String,System.String)">
            <summary>
            获取指定二级分类的三级分类列表
            </summary>
            <param name="firstLevel">一级分类名称</param>
            <param name="secondLevel">二级分类名称</param>
            <returns>三级分类列表</returns>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.CreateProductDto">
            <summary>
            创建商品请求DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CreateProductDto.Title">
            <summary>
            商品标题
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CreateProductDto.Description">
            <summary>
            商品描述
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CreateProductDto.BasePrice">
            <summary>
            基础价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CreateProductDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CreateProductDto.ImageUrls">
            <summary>
            商品图片URL列表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CreateProductDto.AutoRemoveTime">
            <summary>
            自动下架时间（可选，如果不设置则使用默认的20天）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductDetailDto">
            <summary>
            商品详情响应DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.ProductId">
            <summary>
            商品ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.Title">
            <summary>
            商品标题
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.Description">
            <summary>
            商品描述
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.BasePrice">
            <summary>
            基础价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.PublishTime">
            <summary>
            发布时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.ViewCount">
            <summary>
            浏览次数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.AutoRemoveTime">
            <summary>
            自动下架时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.Status">
            <summary>
            商品状态
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.UserId">
            <summary>
            发布用户ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.User">
            <summary>
            发布用户信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.Category">
            <summary>
            分类信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.Images">
            <summary>
            商品图片列表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.DaysUntilAutoRemove">
            <summary>
            距离自动下架剩余天数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductDetailDto.IsOwnProduct">
            <summary>
            是否为当前用户发布的商品
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductUserDto">
            <summary>
            商品用户信息DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductUserDto.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductUserDto.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductUserDto.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductUserDto.AvatarUrl">
            <summary>
            头像URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductUserDto.CreditScore">
            <summary>
            信用分
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductUserDto.IsOnline">
            <summary>
            是否在线
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductCategoryDto">
            <summary>
            商品分类信息DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductCategoryDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductCategoryDto.Name">
            <summary>
            分类名称
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductCategoryDto.ParentId">
            <summary>
            父分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductCategoryDto.FullPath">
            <summary>
            完整分类路径
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductImageDto">
            <summary>
            商品图片信息DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductImageDto.ImageId">
            <summary>
            图片ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductImageDto.ImageUrl">
            <summary>
            图片URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductImageDto.ThumbnailUrl">
            <summary>
            缩略图URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductImageDto.DisplayOrder">
            <summary>
            显示顺序
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductListDto">
            <summary>
            商品列表项响应DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.ProductId">
            <summary>
            商品ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.Title">
            <summary>
            商品标题
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.BasePrice">
            <summary>
            基础价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.PublishTime">
            <summary>
            发布时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.ViewCount">
            <summary>
            浏览次数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.Status">
            <summary>
            商品状态
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.MainImageUrl">
            <summary>
            主图URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.ThumbnailUrl">
            <summary>
            缩略图URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.User">
            <summary>
            发布用户信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.Category">
            <summary>
            分类信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.DaysUntilAutoRemove">
            <summary>
            距离自动下架剩余天数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.IsPopular">
            <summary>
            是否为热门商品（高浏览量）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductListDto.Tags">
            <summary>
            商品标签
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductPagedListDto">
            <summary>
            分页商品列表响应DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductPagedListDto.Products">
            <summary>
            商品列表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductPagedListDto.TotalCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductPagedListDto.PageIndex">
            <summary>
            页索引（从0开始）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductPagedListDto.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductPagedListDto.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductPagedListDto.HasNextPage">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductPagedListDto.HasPreviousPage">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductQueryDto">
            <summary>
            商品查询条件DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.Keyword">
            <summary>
            关键词搜索（标题、描述）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.MinPrice">
            <summary>
            最小价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.MaxPrice">
            <summary>
            最大价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.Status">
            <summary>
            商品状态
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.UserId">
            <summary>
            发布用户ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.PublishStartTime">
            <summary>
            发布开始时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.PublishEndTime">
            <summary>
            发布结束时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.SortBy">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.SortDirection">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.PageIndex">
            <summary>
            页索引（从0开始）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.HasImageOnly">
            <summary>
            是否只显示有图片的商品
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductQueryDto.MinViewCount">
            <summary>
            最小浏览次数
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductSortBy">
            <summary>
            商品排序字段枚举
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.ProductSortBy.PublishTime">
            <summary>
            按发布时间排序
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.ProductSortBy.Price">
            <summary>
            按价格排序
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.ProductSortBy.ViewCount">
            <summary>
            按浏览次数排序
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.ProductSortBy.Title">
            <summary>
            按标题排序
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.ProductSortBy.Status">
            <summary>
            按商品状态排序
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.SortDirection">
            <summary>
            排序方向枚举
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.SortDirection.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.DTOs.Product.SortDirection.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductStatsQueryDto">
            <summary>
            商品统计查询DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsQueryDto.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsQueryDto.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsQueryDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsQueryDto.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.ProductStatsDto">
            <summary>
            商品统计响应DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.TotalCount">
            <summary>
            总商品数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.OnSaleCount">
            <summary>
            在售商品数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.OffShelfCount">
            <summary>
            已下架商品数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.InTransactionCount">
            <summary>
            交易中商品数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.TotalViewCount">
            <summary>
            总浏览次数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.AveragePrice">
            <summary>
            平均价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.MaxPrice">
            <summary>
            最高价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.MinPrice">
            <summary>
            最低价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.ProductStatsDto.CategoryStats">
            <summary>
            按分类统计
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.CategoryStatsDto">
            <summary>
            分类统计DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryStatsDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryStatsDto.CategoryName">
            <summary>
            分类名称
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryStatsDto.ProductCount">
            <summary>
            商品数量
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.CategoryStatsDto.AveragePrice">
            <summary>
            平均价格
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.DTOs.Product.UpdateProductDto">
            <summary>
            更新商品请求DTO
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.UpdateProductDto.Title">
            <summary>
            商品标题
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.UpdateProductDto.Description">
            <summary>
            商品描述
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.UpdateProductDto.BasePrice">
            <summary>
            基础价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.UpdateProductDto.CategoryId">
            <summary>
            分类ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.UpdateProductDto.ImageUrls">
            <summary>
            商品图片URL列表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.UpdateProductDto.Status">
            <summary>
            商品状态
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.DTOs.Product.UpdateProductDto.AutoRemoveTime">
            <summary>
            自动下架时间
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.AbstractOrder">
            <summary>
            抽象订单实体类 - 对应 Oracle 数据库中的 ABSTRACT_ORDERS 表
            作为订单系统的基础表，支持普通订单和换物请求两种类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AbstractOrder.AbstractOrderId">
            <summary>
            抽象订单ID - 主键，对应Oracle中的abstract_order_id字段
            由ORDER_SEQ序列生成
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AbstractOrder.OrderType">
            <summary>
            订单类型 - 对应Oracle中的order_type字段
            限制值：normal（普通订单）、exchange（换物请求）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AbstractOrder.Order">
            <summary>
            对应的普通订单 - 一对一关系
            当OrderType为normal时使用
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AbstractOrder.ExchangeRequest">
            <summary>
            对应的换物请求 - 一对一关系  
            当OrderType为exchange时使用
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AbstractOrder.Notifications">
            <summary>
            该订单相关的通知集合 - 一对多关系
            记录订单状态变更等相关通知
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AbstractOrder.Reviews">
            <summary>
            该订单的评价集合 - 一对多关系
            记录买家对该订单的评价信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AbstractOrder.Reports">
            <summary>
            该订单的举报集合 - 一对多关系
            记录针对该订单的所有举报信息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.AbstractOrder.OrderTypes">
            <summary>
            订单类型的有效值 - 与Oracle检查约束保持一致
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.AbstractOrder.OrderTypes.Normal">
            <summary>
            普通订单 - 用户购买商品的标准订单
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.AbstractOrder.OrderTypes.Exchange">
            <summary>
            换物请求 - 用户之间商品交换的订单
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Admin">
            <summary>
            管理员实体类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Admin.AdminId">
            <summary>
            管理员ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Admin.UserId">
            <summary>
            用户ID（外键）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Admin.Role">
            <summary>
            管理员角色
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Admin.AssignedCategory">
            <summary>
            分配的分类ID（仅category_admin需要）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Admin.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Admin.User">
            <summary>
            关联的用户
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Admin.Category">
            <summary>
            分配的分类（仅category_admin）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Admin.AuditLogs">
            <summary>
            管理员操作的审计日志
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.AuditLog">
            <summary>
            审计日志实体类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AuditLog.LogId">
            <summary>
            日志ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AuditLog.AdminId">
            <summary>
            管理员ID（外键）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AuditLog.ActionType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AuditLog.TargetId">
            <summary>
            目标ID（如用户ID、举报ID等）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AuditLog.LogDetail">
            <summary>
            操作详情
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AuditLog.LogTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.AuditLog.Admin">
            <summary>
            执行操作的管理员
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Category">
            <summary>
            商品分类实体类 - 对应 Oracle 数据库中的 CATEGORIES 表
            支持树形结构，可以有父分类和子分类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Category.CategoryId">
            <summary>
            分类ID - 主键，对应Oracle中的category_id字段，非自增，Oracle序列和触发器处理
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Category.ParentId">
            <summary>
            父分类ID - 外键，对应Oracle中的parent_id字段
            如果为空，则表示这是一级分类（根分类）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Category.Name">
            <summary>
            分类名称 - 对应Oracle中的name字段
            分类的显示名称，最大长度50字符
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Category.Parent">
            <summary>
            父分类 - 多对一关系
            通过ParentId外键关联到父分类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Category.Children">
            <summary>
            子分类集合 - 一对多关系
            当前分类下的所有子分类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Category.Products">
            <summary>
            该分类下的商品集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Category.Admins">
            <summary>
            负责管理该分类的管理员集合
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.CreditHistory">
            <summary>
            信用变更记录实体 - 对应 Oracle 数据库中的 CREDIT_HISTORY 表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.CreditHistory.LogId">
            <summary>
            日志ID - 主键，对应Oracle中的log_id字段，自增（在Oracle中进行）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.CreditHistory.UserId">
            <summary>
            用户ID - 外键，对应Oracle中的user_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.CreditHistory.ChangeType">
            <summary>
            变更类型 - 对应Oracle中的change_type字段
            限制值：交易完成、举报处罚、好评奖励
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.CreditHistory.NewScore">
            <summary>
            新信用分数 - 对应Oracle中的new_score字段，精度为3位数字1位小数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.CreditHistory.CreatedAt">
            <summary>
            创建时间 - 对应Oracle中的created_at字段，默认为当前时间（由Oracle Default处理）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.CreditHistory.ChangeTypes">
            <summary>
            变更类型的有效值
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.EmailVerification">
            <summary>
            邮箱验证实体 - 对应 Oracle 数据库中的 EMAIL_VERIFICATION 表
            支持两种验证方式：6位数字验证码 和 邮箱验证链接
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.EmailVerification.VerificationId">
            <summary>
            验证ID - 主键，对应Oracle中的verification_id字段，自增
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.EmailVerification.UserId">
            <summary>
            用户ID - 外键，对应Oracle中的user_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.EmailVerification.Email">
            <summary>
            邮箱地址 - 对应Oracle中的email字段
            需要验证的邮箱地址
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.EmailVerification.VerificationCode">
            <summary>
            6位数字验证码 - 对应Oracle中的verification_code字段
            用户在邮箱中收到的6位数字验证码，例如：123456
            可为空（当使用Token验证链接时）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.EmailVerification.Token">
            <summary>
            验证令牌 - 对应Oracle中的token字段
            用于邮箱验证链接的64位令牌，例如：https://domain.com/verify?token=abc123...
            可为空（当使用验证码时）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.EmailVerification.ExpireTime">
            <summary>
            过期时间 - 对应Oracle中的expire_time字段
            验证码或令牌的过期时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.EmailVerification.IsUsed">
            <summary>
            使用状态 - 对应Oracle中的is_used字段
            false=未使用，true=已使用，默认值false
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.EmailVerification.CreatedAt">
            <summary>
            创建时间 - 对应Oracle中的created_at字段，默认为当前时间
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.EmailVerification.VerificationStates">
            <summary>
            验证状态的有效值
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.EmailVerification.VerificationStates.Unused">
            <summary>
            未使用 - 验证码/令牌还未被使用
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.EmailVerification.VerificationStates.Used">
            <summary>
            已使用 - 验证码/令牌已被使用
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.EmailVerification.VerificationType">
            <summary>
            验证类型枚举
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.EmailVerification.VerificationType.Code">
            <summary>
            验证码方式 - 6位数字验证码
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.EmailVerification.VerificationType.Token">
            <summary>
            令牌方式 - 邮箱验证链接
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.ExchangeRequest">
            <summary>
            换物请求实体类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.ExchangeId">
            <summary>
            换物请求ID - 主键，外键
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.OfferProductId">
            <summary>
            提供商品ID - 外键
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.RequestProductId">
            <summary>
            请求商品ID - 外键
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.Terms">
            <summary>
            交换条件
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.Status">
            <summary>
            交换状态
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.AbstractOrder">
            <summary>
            关联的抽象订单
            外键关系：exchange_requests.exchange_id -> abstract_orders.abstract_order_id
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.OfferProduct">
            <summary>
            提供的商品
            外键关系：exchange_requests.offer_product_id -> products.product_id
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ExchangeRequest.RequestProduct">
            <summary>
            请求的商品
            外键关系：exchange_requests.request_product_id -> products.product_id
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.LoginLogs">
            <summary>
            登录日志实体 - 对应 Oracle 数据库中的 LOGIN_LOGS 表
            记录用户的登录行为，用于安全审计和风险控制
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.LoginLogs.LogId">
            <summary>
            日志ID - 主键，对应Oracle中的log_id字段，Oracle自增
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.LoginLogs.UserId">
            <summary>
            用户ID - 外键，对应Oracle中的user_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.LoginLogs.IpAddress">
            <summary>
            IP地址 - 记录登录来源IP，对应Oracle中的ip_address字段
            支持IPv4和IPv6格式，最大长度45字符
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.LoginLogs.LogTime">
            <summary>
            登录时间 - 对应Oracle中的log_time字段，默认为当前时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.LoginLogs.DeviceType">
            <summary>
            设备类型 - 对应Oracle中的device_type字段
            限制值：Mobile、PC、Tablet
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.LoginLogs.RiskLevel">
            <summary>
            风险等级 - 对应Oracle中的risk_level字段
            0=低风险，1=中风险，2=高风险
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.LoginLogs.DeviceTypes">
            <summary>
            设备类型的有效值 - 与Oracle检查约束保持一致
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.LoginLogs.RiskLevels">
            <summary>
            风险等级的有效值
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Negotiation">
            <summary>
            议价实体类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Negotiation.NegotiationId">
            <summary>
            议价ID - 主键，自增
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Negotiation.OrderId">
            <summary>
            订单ID - 外键
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Negotiation.ProposedPrice">
            <summary>
            提议价格
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Negotiation.Status">
            <summary>
            议价状态
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Negotiation.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Negotiation.Order">
            <summary>
            关联的订单
            外键关系：negotiations.order_id -> orders.order_id
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Negotiation.ValidStatuses">
            <summary>
            有效的议价状态
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Negotiation.DefaultTimeoutHours">
            <summary>
            默认超时时间（小时）
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Negotiation.MaxNegotiationHours">
            <summary>
            最大议价时间（小时）
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Negotiation.MinDiscountRate">
            <summary>
            最小折扣率
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Negotiation.MaxMarkupRate">
            <summary>
            最大加价率
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Notification">
            <summary>
            通知实体类 - 基于模板的通知系统
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.NotificationId">
            <summary>
            通知ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.TemplateId">
            <summary>
            模板ID（外键）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.RecipientId">
            <summary>
            接收者用户ID（外键）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.OrderId">
            <summary>
            订单ID（外键，可选，仅订单相关通知需要）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.TemplateParams">
            <summary>
            模板参数（JSON格式）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.SendStatus">
            <summary>
            发送状态
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.RetryCount">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.LastAttemptTime">
            <summary>
            最后尝试发送时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.SentAt">
            <summary>
            发送成功时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.Template">
            <summary>
            关联的通知模板
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.Recipient">
            <summary>
            接收通知的用户
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Notification.AbstractOrder">
            <summary>
            关联的抽象订单（可选）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.NotificationTemplate">
            <summary>
            通知模板实体类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.TemplateId">
            <summary>
            模板ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.TemplateName">
            <summary>
            模板名称
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.TemplateType">
            <summary>
            模板类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.TemplateContent">
            <summary>
            模板内容（支持参数占位符）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.Description">
            <summary>
            模板描述
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.Priority">
            <summary>
            优先级（1-5，数字越大优先级越高）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.IsActive">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.UpdatedAt">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.CreatedBy">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.Creator">
            <summary>
            创建者用户
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.NotificationTemplate.Notifications">
            <summary>
            使用该模板的通知集合
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Order">
            <summary>
            订单实体类 - 对应 Oracle 数据库中的 ORDERS 表
            表示普通的商品购买订单，继承自抽象订单
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.OrderId">
            <summary>
            订单ID - 主键，对应Oracle中的order_id字段
            同时也是AbstractOrder的外键，一对一关系
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.BuyerId">
            <summary>
            买家用户ID - 外键，对应Oracle中的buyer_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.SellerId">
            <summary>
            卖家用户ID - 外键，对应Oracle中的seller_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.ProductId">
            <summary>
            商品ID - 外键，对应Oracle中的product_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.TotalAmount">
            <summary>
            订单总金额 - 对应Oracle中的total_amount字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.Status">
            <summary>
            订单状态 - 对应Oracle中的status字段
            限制值：待付款、已付款、已发货、已送达、已完成、已取消，默认值"待付款"
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.CreateTime">
            <summary>
            订单创建时间 - 对应Oracle中的create_time字段
            默认为当前时间戳
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.ExpireTime">
            <summary>
            过期时间 - 对应Oracle中的expire_time字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.FinalPrice">
            <summary>
            最终成交价格 - 对应Oracle中的final_price字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.AbstractOrder">
            <summary>
            对应的抽象订单 - 一对一关系
            通过OrderId外键关联AbstractOrders表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.Buyer">
            <summary>
            买家信息 - 多对一关系
            通过BuyerId外键关联Users表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.Seller">
            <summary>
            卖家信息 - 多对一关系
            通过SellerId外键关联Users表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.Product">
            <summary>
            订单商品 - 多对一关系
            通过ProductId外键关联Products表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Order.Negotiations">
            <summary>
            该订单的议价记录集合 - 一对多关系
            一个订单可以有多个议价记录
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Order.OrderStatus">
            <summary>
            订单状态的有效值
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Order.OrderStatus.PendingPayment">
            <summary>
            待付款 - 订单已创建，等待买家付款
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Order.OrderStatus.Paid">
            <summary>
            已付款 - 买家已付款，等待卖家发货
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Order.OrderStatus.Shipped">
            <summary>
            已发货 - 卖家已发货，等待买家确认收货
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Order.OrderStatus.Delivered">
            <summary>
            已送达 - 商品已送达，等待买家确认
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Order.OrderStatus.Completed">
            <summary>
            已完成 - 交易完成
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Order.OrderStatus.Cancelled">
            <summary>
            已取消 - 订单已取消
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.ProductImage">
            <summary>
            商品图片实体类 - 对应 Oracle 数据库中的 PRODUCT_IMAGES 表
            用于存储商品的图片信息，一个商品可以有多张图片
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ProductImage.ImageId">
            <summary>
            图片ID - 主键，对应Oracle中的image_id字段，自增
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ProductImage.ProductId">
            <summary>
            商品ID - 外键，对应Oracle中的product_id字段
            关联到products表，标识图片所属商品
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ProductImage.ImageUrl">
            <summary>
            图片URL - 对应Oracle中的image_url字段
            存储图片的访问地址，最大长度200字符
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ProductImage.DisplayOrder">
            <summary>
            图片显示顺序 - 用于前端显示排序
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.ProductImage.ImageType">
            <summary>
            图片类型枚举
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.ProductImage.ImageType.Main">
            <summary>
            主图 - 商品的主要展示图片
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.ProductImage.ImageType.Detail">
            <summary>
            详情图 - 商品的详细图片
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.ProductImage.ImageType.Thumbnail">
            <summary>
            缩略图 - 用于列表展示的小图
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.ProductImage.SupportedFormats">
            <summary>
            支持的图片格式
            </summary>
        </member>
        <member name="M:CampusTrade.API.Models.Entities.ProductImage.SupportedFormats.GetAll">
            <summary>
            获取所有支持的格式
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Product">
            <summary>
            商品实体类 - 对应 Oracle 数据库中的 PRODUCTS 表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.ProductId">
            <summary>
            商品ID - 主键，对应Oracle中的product_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.UserId">
            <summary>
            发布用户ID - 外键，对应Oracle中的user_id字段
            关联到users表，标识商品发布者
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.CategoryId">
            <summary>
            商品分类ID - 外键，对应Oracle中的category_id字段
            关联到categories表，商品所属分类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.Title">
            <summary>
            商品标题 - 对应Oracle中的title字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.Description">
            <summary>
            商品描述 - 对应Oracle中的description字段
            详细的商品描述信息，可以为空
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.BasePrice">
            <summary>
            基础价格 - 对应Oracle中的base_price字段，精度为10位数字2位小数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.PublishTime">
            <summary>
            发布时间 - 对应Oracle中的publish_time字段，默认为当前时间=
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.ViewCount">
            <summary>
            浏览次数 - 对应Oracle中的view_count字段，默认为0（由Oracle处理）
            记录商品被查看的次数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.AutoRemoveTime">
            <summary>
            自动下架时间 - 对应Oracle中的auto_remove_time字段
            可以为空，如果设置了时间，到期后自动下架
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.Status">
            <summary>
            商品状态 - 对应Oracle中的status字段
            限制值：在售、已下架、交易中
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.User">
            <summary>
            发布商品的用户 - 多对一关系
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.Category">
            <summary>
            商品所属分类 - 多对一关系
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.ProductImages">
            <summary>
            商品图片集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.OfferExchangeRequests">
            <summary>
            提供该商品的换物请求集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Product.RequestExchangeRequests">
            <summary>
            请求该商品的换物请求集合
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Product.ProductStatus">
            <summary>
            商品状态的有效值
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Product.ProductStatus.OnSale">
            <summary>
            在售 - 商品正在销售中
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Product.ProductStatus.OffShelf">
            <summary>
            已下架 - 商品已下架
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Product.ProductStatus.InTransaction">
            <summary>
            交易中 - 商品正在交易中
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Product.PriceRange">
            <summary>
            价格范围枚举（用于筛选）
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Product.PriceRange.Low">
            <summary>
            0-50元
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Product.PriceRange.Medium">
            <summary>
            50-200元
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Product.PriceRange.High">
            <summary>
            200-500元
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.Product.PriceRange.VeryHigh">
            <summary>
            500元以上
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.RechargeRecord">
            <summary>
            充值记录实体类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RechargeRecord.RechargeId">
            <summary>
            充值记录ID - 主键，由序列和触发器自增
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RechargeRecord.UserId">
            <summary>
            用户ID - 外键
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RechargeRecord.Amount">
            <summary>
            充值金额
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RechargeRecord.Status">
            <summary>
            充值状态（默认值由Oracle处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RechargeRecord.CreateTime">
            <summary>
            创建时间（由Oracle DEFAULT处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RechargeRecord.CompleteTime">
            <summary>
            完成时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RechargeRecord.User">
            <summary>
            关联的用户
            外键关系：recharge_records.user_id -> users.user_id
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RechargeRecord.VirtualAccount">
            <summary>
            关联的虚拟账户
            通过用户ID间接关联
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.RefreshToken">
            <summary>
            刷新令牌实体
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.Token">
            <summary>
            Refresh Token值
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.UserId">
            <summary>
            关联用户ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.ExpiryDate">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.IsRevoked">
            <summary>
            是否已撤销（默认值由Oracle处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.CreatedAt">
            <summary>
            创建时间（由Oracle DEFAULT处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.RevokedAt">
            <summary>
            撤销时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.IpAddress">
            <summary>
            创建时的IP地址
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.UserAgent">
            <summary>
            用户代理信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.DeviceId">
            <summary>
            设备标识
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.ReplacedByToken">
            <summary>
            被哪个Token替换（Token轮换时使用）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.CreatedBy">
            <summary>
            创建者ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.LastUsedAt">
            <summary>
            最后使用时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.RevokedBy">
            <summary>
            撤销者ID
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.RevokeReason">
            <summary>
            撤销原因
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.RefreshToken.User">
            <summary>
            关联的用户实体
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.ReportEvidence">
            <summary>
            举报证据实体类 - 存储举报的证据文件信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ReportEvidence.EvidenceId">
            <summary>
            证据ID - 主键，由序列和触发器自增
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ReportEvidence.ReportId">
            <summary>
            举报ID - 外键，关联举报表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ReportEvidence.FileType">
            <summary>
            文件类型 - 图片/视频/文档
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ReportEvidence.FileUrl">
            <summary>
            文件URL - 证据文件的访问地址
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ReportEvidence.UploadedAt">
            <summary>
            上传时间（由Oracle DEFAULT处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.ReportEvidence.Report">
            <summary>
            关联的举报信息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Reports">
            <summary>
            举报实体类 - 处理用户对订单的举报
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.ReportId">
            <summary>
            举报ID - 主键，由序列和触发器自增
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.OrderId">
            <summary>
            订单ID - 外键，关联抽象订单表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.ReporterId">
            <summary>
            举报人ID - 外键，关联用户表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.Type">
            <summary>
            举报类型 - 商品问题/服务问题/欺诈/虚假描述/其他
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.Priority">
            <summary>
            优先级 - 1-10，数字越大优先级越高
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.Description">
            <summary>
            举报描述
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.Status">
            <summary>
            处理状态 - 待处理/处理中/已处理/已关闭（默认值由Oracle处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.CreateTime">
            <summary>
            创建时间（由Oracle DEFAULT处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.AbstractOrder">
            <summary>
            关联的抽象订单
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.Reporter">
            <summary>
            举报人信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Reports.Evidences">
            <summary>
            举报证据列表
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Review">
            <summary>
            评价实体类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.ReviewId">
            <summary>
            评价ID（由Oracle序列和触发器生成）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.OrderId">
            <summary>
            订单ID（外键，关联抽象订单）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.Rating">
            <summary>
            总体评分（1-5分，支持一位小数）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.DescAccuracy">
            <summary>
            描述准确性评分（1-5分）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.ServiceAttitude">
            <summary>
            服务态度评分（1-5分）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.IsAnonymous">
            <summary>
            是否匿名评价（默认值由Oracle处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.CreateTime">
            <summary>
            评价创建时间（由Oracle DEFAULT处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.SellerReply">
            <summary>
            卖家回复
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.Content">
            <summary>
            评价内容
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Review.AbstractOrder">
            <summary>
            关联的抽象订单
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.Student">
            <summary>
            学生信息实体 - 对应 Oracle 数据库中的 STUDENTS 表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Student.StudentId">
            <summary>
            学生ID - 主键，对应Oracle中的student_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Student.Name">
            <summary>
            学生姓名 - 必填字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.Student.Department">
            <summary>
            所属院系 - 可为空
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.User">
            <summary>
            用户实体类 - 对应 Oracle 数据库中的 USERS 表
            包含用户基本信息、安全信息、JWT认证相关字段和导航属性
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.UserId">
            <summary>
            用户ID - 主键，自增（由Oracle触发器处理）
            对应Oracle中的user_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.Email">
            <summary>
            邮箱地址 - 必填，唯一索引
            对应Oracle中的email字段，最大长度100字符
            用于用户登录和通知发送
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.CreditScore">
            <summary>
            信用分数 - 用户信誉评级
            对应Oracle中的credit_score字段，NUMBER(3,1)类型
            范围：0-100，默认值60.0
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.PasswordHash">
            <summary>
            密码哈希值 - 必填，存储BCrypt加密后的密码
            对应Oracle中的password_hash字段，最大长度128字符
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.StudentId">
            <summary>
            学生ID - 必填，唯一索引，外键关联students表
            对应Oracle中的student_id字段，最大长度20字符
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.Username">
            <summary>
            用户名 - 可选，用于显示和识别
            对应Oracle中的username字段，最大长度50字符
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.FullName">
            <summary>
            完整姓名 - 可选，用户真实姓名
            对应Oracle中的full_name字段，最大长度100字符
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.Phone">
            <summary>
            手机号码 - 可选，用于联系和验证
            对应Oracle中的phone字段，最大长度20字符
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.CreatedAt">
            <summary>
            账户创建时间 - 记录用户注册时间
            对应Oracle中的created_at字段，TIMESTAMP类型，默认为当前时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.UpdatedAt">
            <summary>
            账户更新时间 - 记录最后修改时间
            对应Oracle中的updated_at字段，TIMESTAMP类型，触发器自动更新
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.IsActive">
            <summary>
            账户激活状态 - 标识用户是否可用
            对应Oracle中的is_active字段，NUMBER(1)类型
            0=未激活，1=已激活，默认值1
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.LastLoginAt">
            <summary>
            最后登录时间 - 记录用户最近一次成功登录的时间
            对应Oracle中的last_login_at字段，TIMESTAMP类型，可为空
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.LastLoginIp">
            <summary>
            最后登录IP地址 - 记录用户最近一次登录的IP
            对应Oracle中的last_login_ip字段，VARCHAR2(45)类型
            支持IPv4和IPv6地址格式
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.LoginCount">
            <summary>
            登录次数统计 - 累计登录成功次数（默认值0由Oracle处理）
            对应Oracle中的login_count字段，NUMBER类型，默认值0
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.IsLocked">
            <summary>
            账户锁定状态 - 标识账户是否被锁定（默认值0由Oracle处理）
            对应Oracle中的is_locked字段，NUMBER(1)类型
            0=未锁定，1=已锁定，默认值0
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.LockoutEnd">
            <summary>
            锁定结束时间 - 临时锁定的解锁时间
            对应Oracle中的lockout_end字段，TIMESTAMP类型，可为空
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.FailedLoginAttempts">
            <summary>
            失败登录尝试次数 - 连续登录失败的次数（默认值0由Oracle处理）
            对应Oracle中的failed_login_attempts字段，NUMBER类型，默认值0
            达到限制会触发账户锁定
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.TwoFactorEnabled">
            <summary>
            双因子认证启用状态 - 是否启用2FA（默认值0由Oracle处理）
            对应Oracle中的two_factor_enabled字段，NUMBER(1)类型
            0=未启用，1=已启用，默认值0
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.PasswordChangedAt">
            <summary>
            密码修改时间 - 记录最后一次密码变更时间
            对应Oracle中的password_changed_at字段，TIMESTAMP类型，可为空
            用于密码过期策略
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.SecurityStamp">
            <summary>
            安全戳 - 用于JWT Token验证和安全检查
            对应Oracle中的security_stamp字段，VARCHAR2(256)类型
            每次重要操作后会更新，使旧Token失效
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.EmailVerified">
            <summary>
            邮箱验证状态 - 标识邮箱是否已验证（默认值0由Oracle处理）
            对应Oracle中的email_verified字段，NUMBER(1)类型
            0=未验证，1=已验证，默认值0
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.EmailVerificationToken">
            <summary>
            邮箱验证令牌 - 用于邮箱验证的临时令牌
            对应Oracle中的email_verification_token字段，VARCHAR2(256)类型，可为空
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.Student">
            <summary>
            关联的学生信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.RefreshTokens">
            <summary>
            用户的刷新令牌集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.CreditHistories">
            <summary>
            用户的信用变更记录集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.LoginLogs">
            <summary>
            用户的登录日志集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.EmailVerifications">
            <summary>
            用户的邮箱验证记录集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.Products">
            <summary>
            用户发布的商品集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.BuyerOrders">
            <summary>
            用户作为买家的订单集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.SellerOrders">
            <summary>
            用户作为卖家的订单集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.VirtualAccount">
            <summary>
            用户的虚拟账户
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.RechargeRecords">
            <summary>
            用户的充值记录集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.Admin">
            <summary>
            管理员信息
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.ReceivedNotifications">
            <summary>
            接收的通知集合
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.User.Reports">
            <summary>
            用户提交的举报集合
            </summary>
        </member>
        <member name="T:CampusTrade.API.Models.Entities.VirtualAccount">
            <summary>
            虚拟账户实体 - 对应 Oracle 数据库中的 VIRTUAL_ACCOUNTS 表
            管理用户的虚拟余额
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.VirtualAccount.AccountId">
            <summary>
            账户ID - 主键，对应Oracle中的account_id字段，由序列和触发器自增
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.VirtualAccount.UserId">
            <summary>
            用户ID - 外键，对应Oracle中的user_id字段
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.VirtualAccount.Balance">
            <summary>
            账户余额 - 对应Oracle中的balance字段，精度为10位数字2位小数，默认值0.00（由Oracle处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.VirtualAccount.CreatedAt">
            <summary>
            创建时间 - 对应Oracle中的created_at字段，默认为当前时间（由Oracle处理）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.VirtualAccount.User">
            <summary>
            关联的用户 - 一对一关系
            </summary>
        </member>
        <member name="P:CampusTrade.API.Models.Entities.VirtualAccount.RechargeRecords">
            <summary>
            充值记录集合 - 一对多关系
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.VirtualAccount.MaxBalance">
            <summary>
            最大余额限制
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.VirtualAccount.MinRechargeAmount">
            <summary>
            最小充值金额
            </summary>
        </member>
        <member name="F:CampusTrade.API.Models.Entities.VirtualAccount.MaxRechargeAmount">
            <summary>
            最大充值金额
            </summary>
        </member>
        <member name="T:CampusTrade.API.Options.CacheOptions">
            <summary>
            缓存系统全局配置
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.MemoryCache">
            <summary>
            内存缓存配置
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.DefaultCacheDuration">
            <summary>
            默认缓存持续时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.ProductCacheDuration">
            <summary>
            商品相关缓存持续时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.UserCacheDuration">
            <summary>
            用户信息缓存持续时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.CategoryCacheDuration">
            <summary>
            分类信息缓存持续时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.ConfigCacheDuration">
            <summary>
            系统配置缓存持续时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.NullResultCacheDuration">
            <summary>
            空结果缓存持续时间（防穿透）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.IntervalMinutes">
            <summary>
            定时刷新间隔时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.CacheOptions.InitialDelaySeconds">
            <summary>
            初始延迟时间
            </summary>
        </member>
        <member name="T:CampusTrade.API.Options.MemoryCacheOptions">
            <summary>
            内存缓存配置
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.MemoryCacheOptions.SizeLimit">
            <summary>
            缓存大小限制（MB）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.MemoryCacheOptions.CompactionPercentage">
            <summary>
            内存压缩比例（当达到SizeLimit时）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.MemoryCacheOptions.ExpirationScanFrequency">
            <summary>
            过期扫描频率
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.MemoryCacheOptions.MaxItemSize">
            <summary>
            单个缓存项最大大小（KB）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Options.RedisOptions">
            <summary>
            Redis缓存配置
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.RedisOptions.Enabled">
            <summary>
            是否启用Redis
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.RedisOptions.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.RedisOptions.InstanceName">
            <summary>
            实例名前缀
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.RedisOptions.ConnectTimeout">
            <summary>
            连接超时时间（毫秒）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.RedisOptions.SyncTimeout">
            <summary>
            同步操作超时时间（毫秒）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.RedisOptions.Ssl">
            <summary>
            是否启用SSL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.RedisOptions.Database">
            <summary>
            数据库编号
            </summary>
        </member>
        <member name="T:CampusTrade.API.Options.FileStorageOptions">
            <summary>
            文件存储配置选项
            </summary>
        </member>
        <member name="F:CampusTrade.API.Options.FileStorageOptions.SectionName">
            <summary>
            配置节名称
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.UploadPath">
            <summary>
            上传路径
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.BaseUrl">
            <summary>
            基础URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.MaxFileSize">
            <summary>
            最大文件大小（字节）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.ImageTypes">
            <summary>
            支持的图片类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.DocumentTypes">
            <summary>
            支持的文档类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.ThumbnailWidth">
            <summary>
            缩略图宽度
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.ThumbnailHeight">
            <summary>
            缩略图高度
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.ThumbnailQuality">
            <summary>
            缩略图质量(1-100)
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.EnableThumbnail">
            <summary>
            是否启用缩略图
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.CleanupIntervalHours">
            <summary>
            文件清理间隔（小时）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.FileStorageOptions.OrphanFileRetentionDays">
            <summary>
            孤立文件保留天数
            </summary>
        </member>
        <member name="T:CampusTrade.API.Options.JwtOptions">
            <summary>
            JWT配置选项类
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.SecretKey">
            <summary>
            JWT签名密钥
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.Issuer">
            <summary>
            令牌发行者
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.Audience">
            <summary>
            令牌接收者
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.AccessTokenExpirationMinutes">
            <summary>
            Access Token过期时间（分钟）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.RefreshTokenExpirationDays">
            <summary>
            Refresh Token过期时间（天）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.RequireHttpsMetadata">
            <summary>
            是否要求HTTPS
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.SaveToken">
            <summary>
            是否保存Token到AuthenticationProperties
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.RequireExpirationTime">
            <summary>
            是否要求过期时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.ValidateIssuer">
            <summary>
            是否验证发行者
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.ValidateAudience">
            <summary>
            是否验证接收者
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.ValidateLifetime">
            <summary>
            是否验证生命周期
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.ValidateIssuerSigningKey">
            <summary>
            是否验证签名密钥
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.ClockSkewMinutes">
            <summary>
            时钟偏移容忍度（分钟）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.RefreshTokenRotation">
            <summary>
            是否启用Refresh Token轮换
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.RevokeDescendantRefreshTokens">
            <summary>
            撤销时是否同时撤销子Token
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.EnableTokenBlacklist">
            <summary>
            是否启用Token黑名单
            </summary>
        </member>
        <member name="P:CampusTrade.API.Options.JwtOptions.MaxActiveDevices">
            <summary>
            最大登录设备数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Options.JwtOptions.IsValid">
            <summary>
            验证配置有效性
            </summary>
            <returns></returns>
        </member>
        <member name="M:CampusTrade.API.Options.JwtOptions.GetValidationErrors">
            <summary>
            获取验证错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.AdminRepository">
            <summary>
            管理员仓储实现类（AdminRepository Implementation）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.AdminRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取管理员
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.AdminRepository.GetByRoleAsync(System.String)">
            <summary>
            根据角色获取管理员列表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.AdminRepository.GetCategoryAdminsAsync">
            <summary>
            获取所有分类管理员
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.AdminRepository.GetCategoryAdminByCategoryIdAsync(System.Int32)">
            <summary>
            根据分类ID获取分类管理员
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.AdminRepository.GetActiveAdminsAsync">
            <summary>
            获取所有活跃管理员（最近30天有活动）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.AdminRepository.GetAuditLogsByAdminAsync(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取管理员审计日志
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.AdminRepository.GetAdminStatisticsAsync">
            <summary>
            获取管理员统计信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.AdminRepository.CreateAuditLogAsync(System.Int32,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            创建审计日志
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.CategoriesRepository">
            <summary>
            分类管理仓储实现类（CategoriesRepository Implementation）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetRootCategoriesAsync">
            <summary>
            获取所有根分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetSubCategoriesAsync(System.Int32)">
            <summary>
            获取指定父分类的所有子分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetCategoryTreeAsync">
            <summary>
            获取完整分类树
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetCategoryWithChildrenAsync(System.Int32)">
            <summary>
            获取带有子分类的分类信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetCategoryPathAsync(System.Int32)">
            <summary>
            获取分类路径
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetCategoryFullNameAsync(System.Int32)">
            <summary>
            获取分类全名
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetProductCountByCategoryAsync(System.Int32)">
            <summary>
            获取分类下商品数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetActiveProductCountByCategoryAsync(System.Int32)">
            <summary>
            获取分类下活跃商品数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetCategoryProductCountsAsync">
            <summary>
            获取所有分类的商品数量统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetCategoriesWithProductsAsync">
            <summary>
            获取包含商品的分类集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.SearchCategoriesAsync(System.String)">
            <summary>
            搜索分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.GetCategoryByNameAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            根据名称获取分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.MoveCategoryAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            移动分类到新父分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CategoriesRepository.CanDeleteCategoryAsync(System.Int32)">
            <summary>
            判断分类是否可删除
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CreditHistoryRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取信用记录集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CreditHistoryRepository.GetPagedByUserIdAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            分页获取用户信用记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CreditHistoryRepository.GetByChangeTypeAsync(System.String)">
            <summary>
            根据变更类型获取信用记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CreditHistoryRepository.GetRecentChangesAsync(System.Int32)">
            <summary>
            获取最近N天的信用变更记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CreditHistoryRepository.GetTotalCreditChangeAsync(System.Int32,System.String)">
            <summary>
            获取用户信用总变更值
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CreditHistoryRepository.GetChangeTypeStatisticsAsync">
            <summary>
            获取各变更类型的统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.CreditHistoryRepository.GetCreditTrendsAsync(System.Int32,System.Int32)">
            <summary>
            获取用户信用趋势
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository">
            <summary>
            换物请求管理Repository实现
            提供物品交换、匹配等功能
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetByOfferProductIdAsync(System.Int32)">
            <summary>
            根据发起商品ID获取换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetByRequestProductIdAsync(System.Int32)">
            <summary>
            根据目标商品ID获取换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetPagedRequestsAsync(System.Int32,System.Int32,System.String)">
            <summary>
            分页获取换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetPendingExchangesAsync">
            <summary>
            获取待回应的换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.FindMatchingExchangesAsync(System.Int32)">
            <summary>
            查找与指定商品匹配的换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetMutualExchangeOpportunitiesAsync">
            <summary>
            获取互换机会集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.HasPendingExchangeAsync(System.Int32)">
            <summary>
            检查商品是否有待处理的换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetRecentExchangesAsync(System.Int32)">
            <summary>
            获取最近N天的换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetPopularExchangeCategoriesAsync">
            <summary>
            获取热门换物分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.UpdateExchangeStatusAsync(System.Int32,System.String)">
            <summary>
            更新换物请求状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetSuccessfulExchangeCountAsync">
            <summary>
            获取成功换物次数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ExchangeRequestsRepository.GetExchangeStatusStatisticsAsync">
            <summary>
            获取换物状态统计
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.NegotiationsRepository">
            <summary>
            议价管理仓储实现类（NegotiationsRepository Implementation）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetByOrderIdAsync(System.Int32)">
            <summary>
            根据订单ID获取议价记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetLatestNegotiationAsync(System.Int32)">
            <summary>
            获取订单最新议价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetPendingNegotiationsAsync(System.Int32)">
            <summary>
            获取用户待处理议价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetNegotiationsByStatusAsync(System.String)">
            <summary>
            根据状态获取议价集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetNegotiationHistoryAsync(System.Int32)">
            <summary>
            获取订单议价历史
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetNegotiationCountByOrderAsync(System.Int32)">
            <summary>
            获取订单议价次数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetRecentNegotiationsAsync(System.Int32)">
            <summary>
            获取指定天数内的最新议价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.UpdateNegotiationStatusAsync(System.Int32,System.String)">
            <summary>
            更新议价状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.HasActiveNegotiationAsync(System.Int32)">
            <summary>
            判断订单是否有活跃议价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetAverageNegotiationRateAsync">
            <summary>
            获取议价平均折扣率
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetSuccessfulNegotiationCountAsync">
            <summary>
            获取成功议价总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NegotiationsRepository.GetNegotiationStatisticsAsync">
            <summary>
            获取议价统计信息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.NotificationRepository">
            <summary>
            Notification实体的Repository实现类
            继承基础Repository，提供Notification特有的查询和操作方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.CreateBatchNotificationsAsync(System.Int32,System.Collections.Generic.List{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            批量创建通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.CreateBatchOrderNotificationsAsync(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            批量创建订单相关通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.CreateBatchSystemNotificationsAsync(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            批量创建系统通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetByRecipientIdAsync(System.Int32)">
            <summary>
            根据接收者ID获取通知集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetUnsentNotificationsAsync">
            <summary>
            获取未发送的通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetFailedNotificationsAsync">
            <summary>
            获取发送失败的通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetPendingRetryNotificationsAsync">
            <summary>
            获取待重试的通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetPagedNotificationsByUserAsync(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            分页获取用户通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetHighPriorityNotificationsAsync">
            <summary>
            获取高优先级通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetRecentNotificationsByUserAsync(System.Int32,System.Int32)">
            <summary>
            获取最近的通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.MarkSendStatusAsync(System.Int32,System.String)">
            <summary>
            标记通知发送状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.IncrementRetryCountAsync(System.Int32)">
            <summary>
            增加通知重试次数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.CleanupExpiredFailedNotificationsAsync(System.Int32)">
            <summary>
            清理过期的失败通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetUnreadCountByUserAsync(System.Int32)">
            <summary>
            获取用户未读通知数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.NotificationRepository.GetNotificationStatisticsAsync">
            <summary>
            获取通知统计信息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.OrderRepository">
            <summary>
            Order实体的Repository实现类
            继承基础Repository，提供Order特有的查询和操作方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetByBuyerIdAsync(System.Int32)">
            <summary>
            根据买家ID获取订单集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetBySellerIdAsync(System.Int32)">
            <summary>
            根据卖家ID获取订单集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetByProductIdAsync(System.Int32)">
            <summary>
            根据商品ID获取订单集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetTotalOrdersNumberAsync">
            <summary>
            获取订单总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetPagedOrdersAsync(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            分页多条件查询订单
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetOrderWithDetailsAsync(System.Int32)">
            <summary>
            获取订单详情（包含所有关联信息）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetExpiredOrdersAsync">
            <summary>
            获取过期的订单
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetOrderStatisticsByUserAsync(System.Int32)">
            <summary>
            获取用户的订单统计（买家/卖家分组）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetTotalOrderAmountAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取订单总金额统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetPopularProductsAsync(System.Int32)">
            <summary>
            获取热门商品（根据订单数量）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.GetMonthlyTransactionsAsync(System.Int32)">
            <summary>
            获取月度交易数据
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.OrderRepository.UpdateOrderStatusAsync(System.Int32,System.String)">
            <summary>
            更新订单状态
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.ProductRepository">
            <summary>
            Product实体的Repository实现类
            继承基础Repository，提供Product特有的查询和操作方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID分页获取商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetByCategoryIdAsync(System.Int32)">
            <summary>
            根据分类ID分页获取商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetByTitleAsync(System.String)">
            <summary>
            根据标题模糊查询商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.IsProductExistsAsync(System.String,System.Int32)">
            <summary>
            判断指定用户下商品标题是否存在
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetTotalProductsNumberAsync">
            <summary>
            获取商品总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetTopViewProductsAsync(System.Int32)">
            <summary>
            获取浏览量最高的商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetPagedProductsAsync(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
            分页多条件查询商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetAutoRemoveProductsAsync(System.DateTime)">
            <summary>
            获取即将自动下架的商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetProductImagesAsync(System.Int32)">
            <summary>
            获取商品图片URL集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.SetProductStatusAsync(System.Int32,System.String)">
            <summary>
            设置商品状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.UpdateProductDetailsAsync(System.Int32,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
            更新商品详情
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.IncreaseViewCountAsync(System.Int32)">
            <summary>
            增加商品浏览量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.DeleteProductAsync(System.Int32)">
            <summary>
            逻辑删除商品（下架）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.DeleteProductsByUserAsync(System.Int32)">
            <summary>
            批量逻辑删除用户的所有商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ProductRepository.GetProductWithOrdersAsync(System.Int32)">
            <summary>
            查询商品及其订单信息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository">
            <summary>
            充值记录管理仓储实现类（RechargeRecordsRepository Implementation）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetByUserIdAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            分页获取用户充值记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetPendingRechargesAsync(System.Int32)">
            <summary>
            获取用户待处理充值记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetTotalRechargeAmountByUserAsync(System.Int32)">
            <summary>
            获取用户充值总额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetRecordsByStatusAsync(System.String)">
            <summary>
            根据状态获取充值记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetExpiredRechargesAsync(System.TimeSpan)">
            <summary>
            获取已过期充值记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetTotalRechargeAmountAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取指定时间段内充值总额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetRechargeCountAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取指定时间段内充值次数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetRechargeStatusStatisticsAsync">
            <summary>
            获取充值状态统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetDailyRechargeStatisticsAsync(System.DateTime,System.DateTime)">
            <summary>
            获取每日充值统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetLargeAmountRechargesAsync(System.Decimal)">
            <summary>
            获取大额充值记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.GetFrequentRechargesAsync(System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            获取频繁充值记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.UpdateRechargeStatusAsync(System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            更新充值状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RechargeRecordsRepository.HasRecentFailedRechargesAsync(System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            判断用户在指定时间段内是否有失败充值
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository">
            <summary>
            刷新令牌管理仓储实现类（RefreshTokenRepository Implementation）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.GetByTokenAsync(System.String)">
            <summary>
            根据令牌字符串获取刷新令牌
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            获取指定用户的所有刷新令牌
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.GetActiveTokensByUserAsync(System.Int32)">
            <summary>
            获取指定用户的所有有效刷新令牌
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.GetTokensByDeviceAsync(System.String)">
            <summary>
            获取指定设备的所有刷新令牌
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.GetSuspiciousTokensAsync">
            <summary>
            获取可疑刷新令牌集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.RevokeTokenAsync(System.String,System.String)">
            <summary>
            注销指定令牌
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.RevokeAllUserTokensAsync(System.Int32,System.String)">
            <summary>
            注销指定用户的所有令牌
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.CleanupExpiredTokensAsync">
            <summary>
            清理过期令牌
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.RefreshTokenRepository.IsTokenValidAsync(System.String)">
            <summary>
            判断令牌是否有效
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.ReportsRepository">
            <summary>
            Reports实体的Repository实现类
            继承基础Repository，提供Reports特有的查询和操作方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetByReporterIdAsync(System.Int32)">
            <summary>
            根据举报人ID获取举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetByOrderIdAsync(System.Int32)">
            <summary>
            根据订单ID获取举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetByStatusAsync(System.String)">
            <summary>
            根据状态获取举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetPendingReportsAsync">
            <summary>
            获取待处理举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetOverdueReportsAsync">
            <summary>
            获取超时未处理举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetPagedReportsAsync(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            分页获取举报
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetHighPriorityReportsAsync">
            <summary>
            获取高优先级举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetReportWithDetailsAsync(System.Int32)">
            <summary>
            获取举报详情（包含所有关联信息）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetReportEvidencesAsync(System.Int32)">
            <summary>
            获取举报证据集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.UpdateReportStatusAsync(System.Int32,System.String)">
            <summary>
            更新举报状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.AssignPriorityAsync(System.Int32,System.Int32)">
            <summary>
            分配举报优先级
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.BulkUpdateReportStatusAsync(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            批量更新举报状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.AddReportEvidenceAsync(System.Int32,System.String,System.String)">
            <summary>
            添加举报证据
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetReportStatisticsAsync">
            <summary>
            获取举报统计信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetReportCountByTypeAsync(System.String)">
            <summary>
            获取指定类型举报数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReportsRepository.GetUserReportStatisticsAsync">
            <summary>
            获取用户举报统计
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.ReviewsRepository">
            <summary>
            评价管理Repository实现
            提供订单评价、统计分析等功能
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetByOrderIdAsync(System.Int32)">
            <summary>
            根据订单ID获取评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取评价集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetPagedReviewsAsync(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            分页获取评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetReviewsByProductIdAsync(System.Int32)">
            <summary>
            获取指定商品的评价集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetProductAverageRatingAsync(System.Int32)">
            <summary>
            获取指定商品的平均评分
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetProductDetailedRatingsAsync(System.Int32)">
            <summary>
            获取指定商品的详细评分
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetAnonymousReviewsAsync">
            <summary>
            获取匿名评价集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetAnonymousReviewCountAsync">
            <summary>
            获取匿名评价数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetReviewsWithRepliesAsync">
            <summary>
            获取有卖家回复的评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetReviewsWithoutRepliesAsync(System.Int32)">
            <summary>
            获取指定卖家未回复的评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetHighRatingReviewsAsync(System.Decimal)">
            <summary>
            获取高评分评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetLowRatingReviewsAsync(System.Decimal)">
            <summary>
            获取低评分评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetRecentReviewsAsync(System.Int32)">
            <summary>
            获取最近N天的评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetAverageRatingByUserAsync(System.Int32)">
            <summary>
            获取用户的平均评分
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetAverageRatingByProductAsync(System.Int32)">
            <summary>
            获取商品的平均评分
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetRatingDistributionByUserAsync(System.Int32)">
            <summary>
            获取用户的评分分布
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.GetReviewCountByUserAsync(System.Int32)">
            <summary>
            获取用户评价总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.ReviewsRepository.AddSellerReplyAsync(System.Int32,System.String)">
            <summary>
            卖家回复评价
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.UnitOfWork">
            <summary>
            工作单元实现类
            实现Repository模式的统一管理和事务控制
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.UserRepository">
            <summary>
            用户仓储实现类（UserRepository Implementation）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.CreateUserAsync(CampusTrade.API.Models.Entities.User)">
            <summary>
            创建用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetByEmailAsync(System.String)">
            <summary>
            根据邮箱获取用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetByStudentIdAsync(System.String)">
            <summary>
            根据学号获取用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetByUsernameAsync(System.String)">
            <summary>
            根据用户名获取用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetActiveUsersAsync">
            <summary>
            获取所有活跃用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserWithDetailsAsync(System.Int32)">
            <summary>
            获取用户详细信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserBySecurityStampAsync(System.String)">
            <summary>
            根据安全戳获取用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetPasswordChangedAtAsync(System.Int32)">
            <summary>
            获取用户密码修改时间
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserCountAsync">
            <summary>
            获取用户总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetActiveUserCountAsync">
            <summary>
            获取活跃用户总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUsersByCreditRangeAsync(System.Decimal,System.Decimal)">
            <summary>
            获取信用分数范围内的用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetRecentRegisteredUsersAsync(System.Int32)">
            <summary>
            获取最近注册的用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUsersWithLowCreditAsync(System.Decimal)">
            <summary>
            获取信用分数低于阈值的用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserCountByDepartmentAsync">
            <summary>
            获取用户按院系统计的数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserRegistrationTrendAsync(System.Int32)">
            <summary>
            获取用户注册趋势
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetTopUsersByCreditAsync(System.Int32)">
            <summary>
            获取信用分数最高的用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetLoginLogsAsync(System.Int32)">
            <summary>
            获取用户登录日志
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.SetUserActiveStatusAsync(System.Int32,System.Boolean)">
            <summary>
            设置用户活跃状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.UpdateLastLoginAsync(System.Int32,System.String)">
            <summary>
            更新用户最后登录时间
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.UpdateSecurityStampAsync(System.Int32,System.String)">
            <summary>
            更新用户安全戳
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.LockUserAsync(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            锁定用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.UnlockUserAsync(System.Int32)">
            <summary>
            解锁用户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.IncrementFailedLoginAttemptsAsync(System.Int32)">
            <summary>
            增加用户失败登录次数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.ResetFailedLoginAttemptsAsync(System.Int32)">
            <summary>
            重置用户失败登录次数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.UpdatePasswordAsync(System.Int32,System.String)">
            <summary>
            更新用户密码
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.SetEmailVerifiedAsync(System.Int32,System.Boolean)">
            <summary>
            设置用户邮箱验证状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.UpdateEmailVerificationTokenAsync(System.Int32,System.String)">
            <summary>
            更新用户邮箱验证令牌
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.SetTwoFactorEnabledAsync(System.Int32,System.Boolean)">
            <summary>
            设置用户两步验证状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserWithStudentAsync(System.Int32)">
            <summary>
            获取用户详细信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserWithVirtualAccountAsync(System.Int32)">
            <summary>
            获取用户虚拟账户信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserWithRefreshTokensAsync(System.Int32)">
            <summary>
            获取用户刷新令牌信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserWithOrdersAsync(System.Int32)">
            <summary>
            获取用户订单信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserWithProductsAsync(System.Int32)">
            <summary>
            获取用户商品信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.GetUserWithNotificationsAsync(System.Int32)">
            <summary>
            获取用户通知信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.UserRepository.SearchUsersAsync(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            搜索用户
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository">
            <summary>
            虚拟账户管理Repository实现
            提供账户余额管理、交易处理等功能，保证线程安全
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取虚拟账户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.GetBalanceAsync(System.Int32)">
            <summary>
            获取用户余额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.HasSufficientBalanceAsync(System.Int32,System.Decimal)">
            <summary>
            检查余额是否充足
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.GetTotalSystemBalanceAsync">
            <summary>
            获取系统总余额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.GetAccountsWithBalanceAboveAsync(System.Decimal)">
            <summary>
            获取余额大于指定值的账户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.GetTopBalanceAccountsAsync(System.Int32)">
            <summary>
            获取余额排名前N的账户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.GetAccountsByUserIdsAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            根据用户ID集合批量获取账户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.DebitAsync(System.Int32,System.Decimal,System.String)">
            <summary>
            扣减余额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.CreditAsync(System.Int32,System.Decimal,System.String)">
            <summary>
            增加余额（线程安全）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Implementations.VirtualAccountsRepository.BatchUpdateBalancesAsync(System.Collections.Generic.Dictionary{System.Int32,System.Decimal})">
            <summary>
            批量更新余额
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IAdminRepository">
            <summary>
            管理员仓储接口（AdminRepository Interface）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IAdminRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取管理员
            </summary>
            <param name="userId">用户ID</param>
            <returns>管理员实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IAdminRepository.GetByRoleAsync(System.String)">
            <summary>
            根据角色获取管理员列表
            </summary>
            <param name="role">角色</param>
            <returns>管理员集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IAdminRepository.GetCategoryAdminsAsync">
            <summary>
            获取所有分类管理员
            </summary>
            <returns>管理员集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IAdminRepository.GetCategoryAdminByCategoryIdAsync(System.Int32)">
            <summary>
            根据分类ID获取分类管理员
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>管理员实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IAdminRepository.GetActiveAdminsAsync">
            <summary>
            获取所有活跃管理员
            </summary>
            <returns>活跃管理员集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IAdminRepository.GetAuditLogsByAdminAsync(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取管理员审计日志
            </summary>
            <param name="adminId">管理员ID</param>
            <param name="startDate">起始时间</param>
            <param name="endDate">结束时间</param>
            <returns>审计日志集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IAdminRepository.GetAdminStatisticsAsync">
            <summary>
            获取管理员统计信息
            </summary>
            <returns>统计信息字典</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IAdminRepository.CreateAuditLogAsync(System.Int32,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            创建审计日志
            </summary>
            <param name="adminId">管理员ID</param>
            <param name="actionType">操作类型</param>
            <param name="targetId">目标ID</param>
            <param name="detail">详情</param>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository">
            <summary>
            分类管理仓储接口（CategoriesRepository Interface）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetRootCategoriesAsync">
            <summary>
            获取所有根分类
            </summary>
            <returns>根分类集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetSubCategoriesAsync(System.Int32)">
            <summary>
            获取指定父分类的所有子分类
            </summary>
            <param name="parentId">父分类ID</param>
            <returns>子分类集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetCategoryTreeAsync">
            <summary>
            获取完整分类树
            </summary>
            <returns>分类树集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetCategoryWithChildrenAsync(System.Int32)">
            <summary>
            获取带有子分类的分类信息
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>分类实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetCategoryPathAsync(System.Int32)">
            <summary>
            获取分类路径
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>分类路径集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetCategoryFullNameAsync(System.Int32)">
            <summary>
            获取分类全名
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>分类全名</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetProductCountByCategoryAsync(System.Int32)">
            <summary>
            获取分类下商品数量
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>商品数量</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetActiveProductCountByCategoryAsync(System.Int32)">
            <summary>
            获取分类下活跃商品数量
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>活跃商品数量</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetCategoryProductCountsAsync">
            <summary>
            获取所有分类的商品数量统计
            </summary>
            <returns>分类ID-商品数量字典</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetCategoriesWithProductsAsync">
            <summary>
            获取包含商品的分类集合
            </summary>
            <returns>分类集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.SearchCategoriesAsync(System.String)">
            <summary>
            搜索分类
            </summary>
            <param name="keyword">关键词</param>
            <returns>分类集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.GetCategoryByNameAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            根据名称获取分类
            </summary>
            <param name="name">分类名称</param>
            <param name="parentId">父分类ID</param>
            <returns>分类实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.MoveCategoryAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            移动分类到新父分类
            </summary>
            <param name="categoryId">分类ID</param>
            <param name="newParentId">新父分类ID</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICategoriesRepository.CanDeleteCategoryAsync(System.Int32)">
            <summary>
            判断分类是否可删除
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>是否可删除</returns>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.ICreditHistoryRepository">
            <summary>
            信用记录管理Repository接口
            提供信用变更跟踪等功能
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICreditHistoryRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取信用记录集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICreditHistoryRepository.GetPagedByUserIdAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            分页获取用户信用记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICreditHistoryRepository.GetByChangeTypeAsync(System.String)">
            <summary>
            根据变更类型获取信用记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICreditHistoryRepository.GetRecentChangesAsync(System.Int32)">
            <summary>
            获取最近N天的信用变更记录
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICreditHistoryRepository.GetTotalCreditChangeAsync(System.Int32,System.String)">
            <summary>
            获取用户信用总变更值
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICreditHistoryRepository.GetChangeTypeStatisticsAsync">
            <summary>
            获取各变更类型的统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.ICreditHistoryRepository.GetCreditTrendsAsync(System.Int32,System.Int32)">
            <summary>
            获取用户信用趋势
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository">
            <summary>
            换物请求管理Repository接口
            提供物品交换、匹配等功能
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetByOfferProductIdAsync(System.Int32)">
            <summary>
            根据发起商品ID获取换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetByRequestProductIdAsync(System.Int32)">
            <summary>
            根据目标商品ID获取换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetPagedRequestsAsync(System.Int32,System.Int32,System.String)">
            <summary>
            分页获取换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetPendingExchangesAsync">
            <summary>
            获取待回应的换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.FindMatchingExchangesAsync(System.Int32)">
            <summary>
            查找与指定商品匹配的换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetMutualExchangeOpportunitiesAsync">
            <summary>
            获取互换机会集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.HasPendingExchangeAsync(System.Int32)">
            <summary>
            检查商品是否有待处理的换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetRecentExchangesAsync(System.Int32)">
            <summary>
            获取最近N天的换物请求
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetPopularExchangeCategoriesAsync">
            <summary>
            获取热门换物分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.UpdateExchangeStatusAsync(System.Int32,System.String)">
            <summary>
            更新换物请求状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetSuccessfulExchangeCountAsync">
            <summary>
            获取成功换物次数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IExchangeRequestsRepository.GetExchangeStatusStatisticsAsync">
            <summary>
            获取换物状态统计
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository">
            <summary>
            议价管理仓储接口（NegotiationsRepository Interface）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetByOrderIdAsync(System.Int32)">
            <summary>
            根据订单ID获取议价记录
            </summary>
            <param name="orderId">订单ID</param>
            <returns>议价集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetLatestNegotiationAsync(System.Int32)">
            <summary>
            获取订单最新议价
            </summary>
            <param name="orderId">订单ID</param>
            <returns>议价实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetPendingNegotiationsAsync(System.Int32)">
            <summary>
            获取用户待处理议价
            </summary>
            <param name="userId">用户ID</param>
            <returns>议价集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetNegotiationsByStatusAsync(System.String)">
            <summary>
            根据状态获取议价集合
            </summary>
            <param name="status">议价状态</param>
            <returns>议价集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetNegotiationHistoryAsync(System.Int32)">
            <summary>
            获取订单议价历史
            </summary>
            <param name="orderId">订单ID</param>
            <returns>议价集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetNegotiationCountByOrderAsync(System.Int32)">
            <summary>
            获取订单议价次数
            </summary>
            <param name="orderId">订单ID</param>
            <returns>议价次数</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetRecentNegotiationsAsync(System.Int32)">
            <summary>
            获取指定天数内的最新议价
            </summary>
            <param name="days">天数</param>
            <returns>议价集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.UpdateNegotiationStatusAsync(System.Int32,System.String)">
            <summary>
            更新议价状态
            </summary>
            <param name="negotiationId">议价ID</param>
            <param name="status">新状态</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.HasActiveNegotiationAsync(System.Int32)">
            <summary>
            判断订单是否有活跃议价
            </summary>
            <param name="orderId">订单ID</param>
            <returns>是否有活跃议价</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetAverageNegotiationRateAsync">
            <summary>
            获取议价平均折扣率
            </summary>
            <returns>平均折扣率</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetSuccessfulNegotiationCountAsync">
            <summary>
            获取成功议价总数
            </summary>
            <returns>成功议价数</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INegotiationsRepository.GetNegotiationStatisticsAsync">
            <summary>
            获取议价统计信息
            </summary>
            <returns>统计信息集合</returns>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.INotificationRepository">
            <summary>
            Notification实体的Repository接口
            继承基础IRepository，提供Notification特有的查询和操作方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.CreateBatchNotificationsAsync(System.Int32,System.Collections.Generic.List{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            批量创建通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.CreateBatchOrderNotificationsAsync(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            批量创建订单相关通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.CreateBatchSystemNotificationsAsync(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            批量创建系统通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetByRecipientIdAsync(System.Int32)">
            <summary>
            根据接收者ID获取通知集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetUnsentNotificationsAsync">
            <summary>
            获取未发送的通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetFailedNotificationsAsync">
            <summary>
            获取发送失败的通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetPendingRetryNotificationsAsync">
            <summary>
            获取待重试的通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetPagedNotificationsByUserAsync(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            分页获取用户通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetHighPriorityNotificationsAsync">
            <summary>
            获取高优先级通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetRecentNotificationsByUserAsync(System.Int32,System.Int32)">
            <summary>
            获取最近的通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.MarkSendStatusAsync(System.Int32,System.String)">
            <summary>
            标记通知发送状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.IncrementRetryCountAsync(System.Int32)">
            <summary>
            增加通知重试次数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.CleanupExpiredFailedNotificationsAsync(System.Int32)">
            <summary>
            清理过期的失败通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetUnreadCountByUserAsync(System.Int32)">
            <summary>
            获取用户未读通知数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.INotificationRepository.GetNotificationStatisticsAsync">
            <summary>
            获取通知统计信息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IOrderRepository">
            <summary>
            Order实体的Repository接口
            继承基础IRepository，提供Order特有的查询和操作方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetByBuyerIdAsync(System.Int32)">
            <summary>
            根据买家ID获取订单集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetBySellerIdAsync(System.Int32)">
            <summary>
            根据卖家ID获取订单集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetByProductIdAsync(System.Int32)">
            <summary>
            根据商品ID获取订单集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetTotalOrdersNumberAsync">
            <summary>
            获取订单总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetPagedOrdersAsync(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            分页多条件查询订单
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetOrderWithDetailsAsync(System.Int32)">
            <summary>
            获取订单详情（包含所有关联信息）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetExpiredOrdersAsync">
            <summary>
            获取过期的订单
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetOrderStatisticsByUserAsync(System.Int32)">
            <summary>
            获取用户的订单统计（买家/卖家分组）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetTotalOrderAmountAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取订单总金额统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetPopularProductsAsync(System.Int32)">
            <summary>
            获取热门商品（根据订单数量）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.GetMonthlyTransactionsAsync(System.Int32)">
            <summary>
            获取月度交易数据
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IOrderRepository.UpdateOrderStatusAsync(System.Int32,System.String)">
            <summary>
            更新订单状态
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IProductRepository">
            <summary>
            Product实体的Repository接口
            继承基础IRepository，提供Product特有的查询和操作方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID分页获取商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetByCategoryIdAsync(System.Int32)">
            <summary>
            根据分类ID分页获取商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetByTitleAsync(System.String)">
            <summary>
            根据标题模糊查询商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.IsProductExistsAsync(System.String,System.Int32)">
            <summary>
            判断指定用户下商品标题是否存在
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetTotalProductsNumberAsync">
            <summary>
            获取商品总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetTopViewProductsAsync(System.Int32)">
            <summary>
            获取浏览量最高的商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetPagedProductsAsync(System.Int32,System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32})">
            <summary>
            分页多条件查询商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetAutoRemoveProductsAsync(System.DateTime)">
            <summary>
            获取即将自动下架的商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetProductImagesAsync(System.Int32)">
            <summary>
            获取商品图片URL集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.SetProductStatusAsync(System.Int32,System.String)">
            <summary>
            设置商品状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.UpdateProductDetailsAsync(System.Int32,System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
            更新商品详情
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.IncreaseViewCountAsync(System.Int32)">
            <summary>
            增加商品浏览量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.DeleteProductAsync(System.Int32)">
            <summary>
            逻辑删除商品（下架）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.DeleteProductsByUserAsync(System.Int32)">
            <summary>
            批量逻辑删除用户的所有商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IProductRepository.GetProductWithOrdersAsync(System.Int32)">
            <summary>
            查询商品及其订单信息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository">
            <summary>
            充值记录管理仓储接口（RechargeRecordsRepository Interface）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetByUserIdAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            分页获取用户充值记录
            </summary>
            <param name="userId">用户ID</param>
            <param name="pageIndex">页码</param>
            <param name="pageSize">每页数量</param>
            <returns>充值记录集合及总数</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetPendingRechargesAsync(System.Int32)">
            <summary>
            获取用户待处理充值记录
            </summary>
            <param name="userId">用户ID</param>
            <returns>充值记录集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetTotalRechargeAmountByUserAsync(System.Int32)">
            <summary>
            获取用户充值总额
            </summary>
            <param name="userId">用户ID</param>
            <returns>充值总额</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetRecordsByStatusAsync(System.String)">
            <summary>
            根据状态获取充值记录
            </summary>
            <param name="status">充值状态</param>
            <returns>充值记录集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetExpiredRechargesAsync(System.TimeSpan)">
            <summary>
            获取已过期充值记录
            </summary>
            <param name="expiration">过期时长</param>
            <returns>充值记录集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetTotalRechargeAmountAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取指定时间段内充值总额
            </summary>
            <param name="startDate">起始时间</param>
            <param name="endDate">结束时间</param>
            <returns>充值总额</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetRechargeCountAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取指定时间段内充值次数
            </summary>
            <param name="startDate">起始时间</param>
            <param name="endDate">结束时间</param>
            <returns>充值次数</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetRechargeStatusStatisticsAsync">
            <summary>
            获取充值状态统计
            </summary>
            <returns>状态-数量字典</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetDailyRechargeStatisticsAsync(System.DateTime,System.DateTime)">
            <summary>
            获取每日充值统计
            </summary>
            <param name="startDate">起始日期</param>
            <param name="endDate">结束日期</param>
            <returns>每日统计集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetLargeAmountRechargesAsync(System.Decimal)">
            <summary>
            获取大额充值记录
            </summary>
            <param name="minAmount">最小金额</param>
            <returns>充值记录集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.GetFrequentRechargesAsync(System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            获取频繁充值记录
            </summary>
            <param name="userId">用户ID</param>
            <param name="timeSpan">时间范围</param>
            <param name="minCount">最小次数</param>
            <returns>充值记录集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.UpdateRechargeStatusAsync(System.Int32,System.String,System.Nullable{System.DateTime})">
            <summary>
            更新充值状态
            </summary>
            <param name="rechargeId">充值ID</param>
            <param name="status">新状态</param>
            <param name="completeTime">完成时间</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRechargeRecordsRepository.HasRecentFailedRechargesAsync(System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            判断用户在指定时间段内是否有失败充值
            </summary>
            <param name="userId">用户ID</param>
            <param name="timeSpan">时间范围</param>
            <param name="maxFailures">最大失败次数</param>
            <returns>是否有失败充值</returns>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository">
            <summary>
            刷新令牌管理仓储接口（RefreshTokenRepository Interface）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.GetByTokenAsync(System.String)">
            <summary>
            根据令牌字符串获取刷新令牌
            </summary>
            <param name="token">令牌字符串</param>
            <returns>刷新令牌实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            获取指定用户的所有刷新令牌
            </summary>
            <param name="userId">用户ID</param>
            <returns>刷新令牌集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.GetActiveTokensByUserAsync(System.Int32)">
            <summary>
            获取指定用户的所有有效刷新令牌
            </summary>
            <param name="userId">用户ID</param>
            <returns>刷新令牌集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.GetTokensByDeviceAsync(System.String)">
            <summary>
            获取指定设备的所有刷新令牌
            </summary>
            <param name="deviceId">设备ID</param>
            <returns>刷新令牌集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.GetSuspiciousTokensAsync">
            <summary>
            获取可疑刷新令牌集合
            </summary>
            <returns>刷新令牌集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.RevokeTokenAsync(System.String,System.String)">
            <summary>
            注销指定令牌
            </summary>
            <param name="token">令牌字符串</param>
            <param name="reason">注销原因</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.RevokeAllUserTokensAsync(System.Int32,System.String)">
            <summary>
            注销指定用户的所有令牌
            </summary>
            <param name="userId">用户ID</param>
            <param name="reason">注销原因</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.CleanupExpiredTokensAsync">
            <summary>
            清理过期令牌
            </summary>
            <returns>清理数量</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IRefreshTokenRepository.IsTokenValidAsync(System.String)">
            <summary>
            判断令牌是否有效
            </summary>
            <param name="token">令牌字符串</param>
            <returns>是否有效</returns>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IReportsRepository">
            <summary>
            Reports实体的Repository接口
            继承基础IRepository，提供Reports特有的查询和操作方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetByReporterIdAsync(System.Int32)">
            <summary>
            根据举报人ID获取举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetByOrderIdAsync(System.Int32)">
            <summary>
            根据订单ID获取举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetByStatusAsync(System.String)">
            <summary>
            根据状态获取举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetPendingReportsAsync">
            <summary>
            获取待处理举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetOverdueReportsAsync">
            <summary>
            获取超时未处理举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetPagedReportsAsync(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            分页获取举报
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetHighPriorityReportsAsync">
            <summary>
            获取高优先级举报集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetReportWithDetailsAsync(System.Int32)">
            <summary>
            获取举报详情（包含所有关联信息）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetReportEvidencesAsync(System.Int32)">
            <summary>
            获取举报证据集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.UpdateReportStatusAsync(System.Int32,System.String)">
            <summary>
            更新举报状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.AssignPriorityAsync(System.Int32,System.Int32)">
            <summary>
            分配举报优先级
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.BulkUpdateReportStatusAsync(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            批量更新举报状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.AddReportEvidenceAsync(System.Int32,System.String,System.String)">
            <summary>
            添加举报证据
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetReportStatisticsAsync">
            <summary>
            获取举报统计信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetReportCountByTypeAsync(System.String)">
            <summary>
            获取指定类型举报数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReportsRepository.GetUserReportStatisticsAsync">
            <summary>
            获取用户举报统计
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IRepository`1">
            <summary>
            基础Repository接口
            定义通用的CRUD操作和查询方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IReviewsRepository">
            <summary>
            评价管理Repository接口
            提供订单评价、统计分析等功能
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetByOrderIdAsync(System.Int32)">
            <summary>
            根据订单ID获取评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取评价集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetPagedReviewsAsync(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            分页获取评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetReviewsByProductIdAsync(System.Int32)">
            <summary>
            获取指定商品的评价集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetProductAverageRatingAsync(System.Int32)">
            <summary>
            获取指定商品的平均评分
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetProductDetailedRatingsAsync(System.Int32)">
            <summary>
            获取指定商品的详细评分
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetAnonymousReviewsAsync">
            <summary>
            获取匿名评价集合
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetAnonymousReviewCountAsync">
            <summary>
            获取匿名评价数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetReviewsWithRepliesAsync">
            <summary>
            获取有卖家回复的评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetReviewsWithoutRepliesAsync(System.Int32)">
            <summary>
            获取指定卖家未回复的评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetHighRatingReviewsAsync(System.Decimal)">
            <summary>
            获取高评分评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetLowRatingReviewsAsync(System.Decimal)">
            <summary>
            获取低评分评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetRecentReviewsAsync(System.Int32)">
            <summary>
            获取最近N天的评价
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetAverageRatingByUserAsync(System.Int32)">
            <summary>
            获取用户的平均评分
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetAverageRatingByProductAsync(System.Int32)">
            <summary>
            获取商品的平均评分
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetRatingDistributionByUserAsync(System.Int32)">
            <summary>
            获取用户的评分分布
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.GetReviewCountByUserAsync(System.Int32)">
            <summary>
            获取用户评价总数
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IReviewsRepository.AddSellerReplyAsync(System.Int32,System.String)">
            <summary>
            卖家回复评价
            </summary>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IUnitOfWork">
            <summary>
            工作单元接口
            实现Repository模式的统一管理和事务控制
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.SaveChangesAsync">
            <summary>
            保存所有更改
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.BeginTransactionAsync">
            <summary>
            开始事务
            </summary>
            <returns>事务对象</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.CommitTransactionAsync">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.RollbackTransactionAsync">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.ExecuteQueryAsync``1(System.String,System.Object[])">
            <summary>
            执行原生SQL查询
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.ExecuteCommandAsync(System.String,System.Object[])">
            <summary>
            执行原生SQL命令
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.BulkInsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量插入数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.BulkUpdateAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量更新数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.BulkDeleteAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量删除数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.ClearChangeTracker">
            <summary>
            清除实体框架缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.DetachEntity``1(``0)">
            <summary>
            分离实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.GetEntityState``1(``0)">
            <summary>
            获取实体状态
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
            <returns>实体状态</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.GetPendingChangesCount">
            <summary>
            获取待处理的更改数量
            </summary>
            <returns>更改数量</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUnitOfWork.HasPendingChanges">
            <summary>
            检查是否有待处理的更改
            </summary>
            <returns>是否有更改</returns>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IUserRepository">
            <summary>
            用户仓储接口（UserRepository Interface）
            <para>所属分层：仓储层（Repositories）</para>
            <para>用途：定义User实体的数据访问操作，规范所有用户相关的数据持久化方法</para>
            <para>继承关系：继承自IRepository&lt;User&gt;</para>
            <para>主要职责：仅负责数据访问，不包含任何业务逻辑</para>
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.CreateUserAsync(CampusTrade.API.Models.Entities.User)">
            <summary>
            创建新用户
            </summary>
            <param name="user">要创建的用户实体</param>
            <returns>创建后的用户实体</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetByEmailAsync(System.String)">
            <summary>
            根据邮箱查询用户
            </summary>
            <param name="email">邮箱地址</param>
            <returns>匹配的用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetByStudentIdAsync(System.String)">
            <summary>
            根据学号查询用户
            </summary>
            <param name="studentId">学号</param>
            <returns>匹配的用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetByUsernameAsync(System.String)">
            <summary>
            根据用户名获取用户
            </summary>
            <param name="username">用户名</param>
            <returns>匹配的用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetActiveUsersAsync">
            <summary>
            获取所有活跃用户
            </summary>
            <returns>活跃用户集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserWithDetailsAsync(System.Int32)">
            <summary>
            获取用户详细信息（含导航属性）
            </summary>
            <param name="userId">用户ID</param>
            <returns>用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserBySecurityStampAsync(System.String)">
            <summary>
            根据安全戳获取用户
            </summary>
            <param name="securityStamp">安全戳</param>
            <returns>用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetPasswordChangedAtAsync(System.Int32)">
            <summary>
            获取密码修改时间
            </summary>
            <param name="userId">用户ID</param>
            <returns>密码修改时间</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserCountAsync">
            <summary>
            获取用户总数
            </summary>
            <returns>用户总数</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetActiveUserCountAsync">
            <summary>
            获取活跃用户总数
            </summary>
            <returns>活跃用户总数</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUsersByCreditRangeAsync(System.Decimal,System.Decimal)">
            <summary>
            根据信用分数范围获取用户
            </summary>
            <param name="minCredit">最小信用分</param>
            <param name="maxCredit">最大信用分</param>
            <returns>用户集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetRecentRegisteredUsersAsync(System.Int32)">
            <summary>
            根据注册时间获取用户
            </summary>
            <param name="days">最近N天</param>
            <returns>用户集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUsersWithLowCreditAsync(System.Decimal)">
            <summary>
            获取低信用用户
            </summary>
            <param name="threshold">信用分阈值</param>
            <returns>用户集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserCountByDepartmentAsync">
            <summary>
            根据院系分类统计用户数量
            </summary>
            <returns>院系-用户数字典</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserRegistrationTrendAsync(System.Int32)">
            <summary>
            根据注册时间统计用户数量
            </summary>
            <param name="days">最近N天</param>
            <returns>日期-用户数字典</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetTopUsersByCreditAsync(System.Int32)">
            <summary>
            获取信用分数最高的用户
            </summary>
            <param name="count">数量</param>
            <returns>用户集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetLoginLogsAsync(System.Int32)">
            <summary>
            获取用户登录日志
            </summary>
            <param name="userId">用户ID</param>
            <returns>登录日志集合</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.SetUserActiveStatusAsync(System.Int32,System.Boolean)">
            <summary>
            更新用户账号状态
            </summary>
            <param name="userId">用户ID</param>
            <param name="isActive">是否活跃</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.UpdateLastLoginAsync(System.Int32,System.String)">
            <summary>
            更新用户最后登录信息
            </summary>
            <param name="userId">用户ID</param>
            <param name="ipAddress">登录IP</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.UpdateSecurityStampAsync(System.Int32,System.String)">
            <summary>
            更新用户安全戳
            </summary>
            <param name="userId">用户ID</param>
            <param name="newSecurityStamp">新安全戳</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.LockUserAsync(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            锁定用户
            </summary>
            <param name="userId">用户ID</param>
            <param name="lockoutEnd">锁定截止时间</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.UnlockUserAsync(System.Int32)">
            <summary>
            解锁用户
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.IncrementFailedLoginAttemptsAsync(System.Int32)">
            <summary>
            增加登录失败次数
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.ResetFailedLoginAttemptsAsync(System.Int32)">
            <summary>
            重置登录失败次数
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.UpdatePasswordAsync(System.Int32,System.String)">
            <summary>
            更新用户密码
            </summary>
            <param name="userId">用户ID</param>
            <param name="newPasswordHash">新密码Hash</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.SetEmailVerifiedAsync(System.Int32,System.Boolean)">
            <summary>
            更新用户邮箱验证状态
            </summary>
            <param name="userId">用户ID</param>
            <param name="isVerified">是否已验证</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.UpdateEmailVerificationTokenAsync(System.Int32,System.String)">
            <summary>
            更新用户邮箱验证令牌
            </summary>
            <param name="userId">用户ID</param>
            <param name="token">邮箱验证令牌</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.SetTwoFactorEnabledAsync(System.Int32,System.Boolean)">
            <summary>
            更新用户双因子认证状态
            </summary>
            <param name="userId">用户ID</param>
            <param name="enabled">是否启用</param>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserWithStudentAsync(System.Int32)">
            <summary>
            查询用户与学生信息
            </summary>
            <param name="userId">用户ID</param>
            <returns>用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserWithVirtualAccountAsync(System.Int32)">
            <summary>
            查询用户与虚拟账户信息
            </summary>
            <param name="userId">用户ID</param>
            <returns>用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserWithRefreshTokensAsync(System.Int32)">
            <summary>
            查询用户与刷新令牌信息
            </summary>
            <param name="userId">用户ID</param>
            <returns>用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserWithOrdersAsync(System.Int32)">
            <summary>
            查询用户与订单信息
            </summary>
            <param name="userId">用户ID</param>
            <returns>用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserWithProductsAsync(System.Int32)">
            <summary>
            查询用户与商品信息
            </summary>
            <param name="userId">用户ID</param>
            <returns>用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.GetUserWithNotificationsAsync(System.Int32)">
            <summary>
            查询用户与通知信息
            </summary>
            <param name="userId">用户ID</param>
            <returns>用户实体或null</returns>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IUserRepository.SearchUsersAsync(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            高级用户查询，支持多条件筛选与分页
            </summary>
            <param name="keyword">关键词（用户名或邮箱）</param>
            <param name="department">院系</param>
            <param name="minCredit">最小信用分</param>
            <param name="maxCredit">最大信用分</param>
            <param name="isActive">是否活跃</param>
            <param name="isLocked">是否锁定</param>
            <param name="registeredAfter">注册起始时间</param>
            <param name="registeredBefore">注册截止时间</param>
            <param name="pageNumber">页码</param>
            <param name="pageSize">每页数量</param>
            <returns>用户集合及总数</returns>
        </member>
        <member name="T:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository">
            <summary>
            虚拟账户管理Repository接口
            提供账户余额管理、交易处理等功能
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.GetByUserIdAsync(System.Int32)">
            <summary>
            根据用户ID获取虚拟账户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.GetBalanceAsync(System.Int32)">
            <summary>
            获取用户余额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.HasSufficientBalanceAsync(System.Int32,System.Decimal)">
            <summary>
            检查余额是否充足
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.GetTotalSystemBalanceAsync">
            <summary>
            获取系统总余额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.GetAccountsWithBalanceAboveAsync(System.Decimal)">
            <summary>
            获取余额大于指定值的账户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.GetTopBalanceAccountsAsync(System.Int32)">
            <summary>
            获取余额排名前N的账户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.GetAccountsByUserIdsAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            根据用户ID集合批量获取账户
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.DebitAsync(System.Int32,System.Decimal,System.String)">
            <summary>
            扣减余额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.CreditAsync(System.Int32,System.Decimal,System.String)">
            <summary>
            增加余额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Repositories.Interfaces.IVirtualAccountsRepository.BatchUpdateBalancesAsync(System.Collections.Generic.Dictionary{System.Int32,System.Decimal})">
            <summary>
            批量更新余额
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.EmailVerificationService.SendVerificationCodeAsync(System.Int32,System.String)">
            <summary>
            生成6位验证码并发送邮件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.EmailVerificationService.SendVerificationLinkAsync(System.Int32,System.String)">
            <summary>
            生成验证链接（令牌）并发送邮件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.EmailVerificationService.VerifyCodeAsync(System.Int32,System.String)">
            <summary>
            验证用户提交的验证码
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.EmailVerificationService.VerifyTokenAsync(System.String)">
            <summary>
            验证用户点击的令牌链接
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Auth.ITokenService">
            <summary>
            Token服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.GenerateAccessTokenAsync(CampusTrade.API.Models.Entities.User,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            生成访问令牌
            </summary>
            <param name="user">用户信息</param>
            <param name="additionalClaims">额外的Claims</param>
            <returns>JWT访问令牌</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.GenerateRefreshTokenAsync(System.Int32,System.String,System.String,System.String)">
            <summary>
            生成刷新令牌
            </summary>
            <param name="userId">用户ID</param>
            <param name="ipAddress">IP地址</param>
            <param name="userAgent">用户代理</param>
            <param name="deviceId">设备ID</param>
            <returns>刷新令牌实体</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.GenerateTokenResponseAsync(CampusTrade.API.Models.Entities.User,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            生成完整的Token响应
            </summary>
            <param name="user">用户信息</param>
            <param name="ipAddress">IP地址</param>
            <param name="userAgent">用户代理</param>
            <param name="deviceId">设备ID</param>
            <param name="additionalClaims">额外的Claims</param>
            <returns>Token响应</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.ValidateAccessTokenAsync(System.String)">
            <summary>
            验证访问令牌
            </summary>
            <param name="token">访问令牌</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.ValidateRefreshTokenAsync(System.String)">
            <summary>
            验证刷新令牌
            </summary>
            <param name="refreshToken">刷新令牌</param>
            <returns>刷新令牌实体（如果有效）</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.RefreshTokenAsync(CampusTrade.API.Models.DTOs.Auth.RefreshTokenRequest)">
            <summary>
            刷新访问令牌
            </summary>
            <param name="refreshTokenRequest">刷新令牌请求</param>
            <returns>新的Token响应</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.RevokeRefreshTokenAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            撤销刷新令牌
            </summary>
            <param name="refreshToken">要撤销的刷新令牌</param>
            <param name="reason">撤销原因</param>
            <param name="revokedBy">撤销者ID</param>
            <returns>撤销是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.RevokeAllUserTokensAsync(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            撤销用户的所有刷新令牌
            </summary>
            <param name="userId">用户ID</param>
            <param name="reason">撤销原因</param>
            <param name="revokedBy">撤销者ID</param>
            <returns>撤销的令牌数量</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.GetActiveRefreshTokensAsync(System.Int32)">
            <summary>
            获取用户的活跃刷新令牌列表
            </summary>
            <param name="userId">用户ID</param>
            <returns>活跃的刷新令牌列表</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.CleanupExpiredTokensAsync">
            <summary>
            清理过期的刷新令牌
            </summary>
            <returns>清理的令牌数量</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.IsTokenBlacklistedAsync(System.String)">
            <summary>
            检查Token是否在黑名单中
            </summary>
            <param name="jti">JWT ID</param>
            <returns>是否在黑名单中</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.ITokenService.BlacklistTokenAsync(System.String,System.DateTime)">
            <summary>
            将Token添加到黑名单
            </summary>
            <param name="jti">JWT ID</param>
            <param name="expiration">过期时间</param>
            <returns>添加是否成功</returns>
        </member>
        <member name="T:CampusTrade.API.Services.Auth.TokenService">
            <summary>
            Token服务实现
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Auth.NotifiSenderService">
            <summary>
            通知发送器服务 - 负责从队列中取出通知并发送
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiSenderService.SendNotificationAsync(System.Int32)">
            <summary>
            发送单个通知
            </summary>
            <param name="notificationId">通知ID</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiSenderService.PushNotificationToUser(System.Int32,System.String,System.String)">
            <summary>
            通过SignalR推送消息到用户
            </summary>
            <param name="userId">用户ID</param>
            <param name="title">消息标题</param>
            <param name="content">消息内容</param>
            <returns>推送结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiSenderService.UpdateNotificationStatus(System.Int32,System.Boolean,System.String)">
            <summary>
            更新通知状态
            </summary>
            <param name="notificationId">通知ID</param>
            <param name="success">是否成功</param>
            <param name="errorMessage">错误消息</param>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiSenderService.ProcessNotificationQueueAsync(System.Int32)">
            <summary>
            批量处理待发送的通知队列
            </summary>
            <param name="batchSize">批次大小</param>
            <returns>处理结果统计</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiSenderService.RetryFailedNotificationsAsync(System.Int32)">
            <summary>
            重试失败的通知
            </summary>
            <param name="batchSize">批次大小</param>
            <returns>处理结果统计</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiSenderService.GetQueueStatsAsync">
            <summary>
            获取通知队列状态统计
            </summary>
            <returns>统计信息</returns>
        </member>
        <member name="T:CampusTrade.API.Services.Auth.NotifiService">
            <summary>
            通知服务：负责通知的创建和管理
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiService.CreateNotificationAsync(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            创建通知的主接口（只创建不发送）
            </summary>
            <param name="recipientId">目标用户ID</param>
            <param name="templateId">模板ID</param>
            <param name="paramDict">参数字典</param>
            <param name="orderId">可选，关联订单</param>
            <returns>创建结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiService.GetNotificationStatsAsync">
            <summary>
            获取通知发送统计
            </summary>
            <returns>统计信息</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Auth.NotifiService.GetUserNotificationsAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取用户的通知历史
            </summary>
            <param name="userId">用户ID</param>
            <param name="pageSize">页大小</param>
            <param name="pageIndex">页索引</param>
            <returns>通知列表</returns>
        </member>
        <member name="T:CampusTrade.API.Services.Background.CacheRefreshBackgroundService">
            <summary>
            后台定时30minutes,刷新各缓存内容
            其它三类定时刷新，user类只登记命中率，按需刷新
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Background.CacheRefreshBackgroundService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            刷新各部分缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Background.CacheRefreshBackgroundService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            停止缓存功能
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Background.NotificationBackgroundService">
            <summary>
            通知发送后台服务 - 持续监控队列并发送通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Background.NotificationBackgroundService.TriggerProcessing">
            <summary>
            外部调用此方法来立即触发通知处理
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Cache.CacheService">
            <summary>
            内存缓存服务实现
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Cache.MemoryCacheExtensions">
            <summary>
            MemoryCache扩展方法（用于获取所有Key）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Cache.SystemConfigCacheService">
            <summary>
            系统配置缓存服务实现
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Cache.UserCacheService.GetUserByUsernameAsync(System.String)">
            <summary>
            根据用户名或邮箱获取用户信息（带学生信息）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Cache.UserCacheService.SetUserByUsernameAsync(System.String,CampusTrade.API.Models.Entities.User)">
            <summary>
            设置根据用户名/邮箱查询的用户缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Cache.UserCacheService.ValidateStudentAsync(System.String,System.String)">
            <summary>
            验证学生身份（学号+姓名）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Cache.UserCacheService.SetStudentValidationAsync(System.String,System.String,System.Boolean)">
            <summary>
            设置学生验证结果缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Cache.UserCacheService.InvalidateUsernameQueryCacheAsync(System.String)">
            <summary>
            失效用户名/邮箱查询缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Cache.UserCacheService.InvalidateStudentValidationCacheAsync(System.String,System.String)">
            <summary>
            失效学生验证缓存
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileCleanupService">
            <summary>
            文件清理后台服务
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileCleanupService.CleanupOrphanFilesAsync">
            <summary>
            清理孤立文件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileCleanupService.IsFileReferencedAsync(System.String,CampusTrade.API.Data.CampusTradeDbContext)">
            <summary>
            检查文件是否在数据库中被引用
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileHelper">
            <summary>
            文件管理助手类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.GetThumbnailFileName(System.String)">
            <summary>
            获取缩略图文件名
            </summary>
            <param name="originalFileName">原始文件名</param>
            <returns>缩略图文件名</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.GetOriginalFileName(System.String)">
            <summary>
            从缩略图文件名获取原始文件名
            </summary>
            <param name="thumbnailFileName">缩略图文件名</param>
            <returns>原始文件名</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.IsThumbnailFile(System.String)">
            <summary>
            判断是否为缩略图文件
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否为缩略图</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.ExtractFileNameFromUrl(System.String)">
            <summary>
            从文件URL中提取文件名
            </summary>
            <param name="fileUrl">文件URL</param>
            <returns>文件名</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.GetMimeType(System.String)">
            <summary>
            获取文件的MIME类型
            </summary>
            <param name="fileName">文件名</param>
            <returns>MIME类型</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.IsFileNameSafe(System.String)">
            <summary>
            验证文件名是否安全
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否安全</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.FormatFileSize(System.Int64)">
            <summary>
            格式化文件大小
            </summary>
            <param name="bytes">字节数</param>
            <returns>格式化后的文件大小</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.GenerateSafeFileName(System.String)">
            <summary>
            生成安全的文件名
            </summary>
            <param name="originalFileName">原始文件名</param>
            <returns>安全的文件名</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.IsImageFile(System.String)">
            <summary>
            检查文件是否为图片
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否为图片</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.IsVideoFile(System.String)">
            <summary>
            检查文件是否为视频
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否为视频</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileHelper.IsDocumentFile(System.String)">
            <summary>
            检查文件是否为文档
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否为文档</returns>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileService">
            <summary>
            文件服务实现
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.UploadFileAsync(Microsoft.AspNetCore.Http.IFormFile,CampusTrade.API.Services.File.FileType,System.Boolean)">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.DownloadFileAsync(System.String)">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.DeleteFileAsync(System.String)">
            <summary>
            删除文件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.FileExistsAsync(System.String)">
            <summary>
            检查文件是否存在
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GetFileInfoAsync(System.String)">
            <summary>
            获取文件信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GetThumbnailFileName(System.String)">
            <summary>
            获取缩略图文件名
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GenerateUniqueFileName(System.String)">
            <summary>
            生成唯一文件名
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.ValidateFileType(Microsoft.AspNetCore.Http.IFormFile,System.String[])">
            <summary>
            验证文件类型
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.DownloadFileByUrlAsync(System.String)">
            <summary>
            通过URL下载文件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.DeleteFileByUrlAsync(System.String)">
            <summary>
            通过URL删除文件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.FileExistsByUrlAsync(System.String)">
            <summary>
            通过URL检查文件是否存在
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GetFileInfoByUrlAsync(System.String)">
            <summary>
            通过URL获取文件信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.ExtractFileNameFromUrl(System.String)">
            <summary>
            从文件URL提取文件名
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.ExtractFileTypeFromUrl(System.String)">
            <summary>
            从文件URL提取文件类型
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GetAllFilesAsync(System.Nullable{CampusTrade.API.Services.File.FileType})">
            <summary>
            获取所有文件列表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.ValidateFile(Microsoft.AspNetCore.Http.IFormFile,CampusTrade.API.Services.File.FileType)">
            <summary>
            验证文件
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GetAllowedFileTypes(CampusTrade.API.Services.File.FileType)">
            <summary>
            获取允许的文件类型
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GetFileTypeFolder(CampusTrade.API.Services.File.FileType)">
            <summary>
            获取文件类型文件夹
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GetFileUrl(CampusTrade.API.Services.File.FileType,System.String)">
            <summary>
            获取文件URL
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.FindFilePath(System.String)">
            <summary>
            查找文件路径
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.EnsureDirectoryExists(System.String)">
            <summary>
            确保目录存在
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.GetContentType(System.String)">
            <summary>
            获取内容类型
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.FileService.DetermineFileTypeFromFolder(System.String)">
            <summary>
            根据文件夹名确定文件类型
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileValidationResult">
            <summary>
            文件验证结果
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.IFileService">
            <summary>
            文件服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.UploadFileAsync(Microsoft.AspNetCore.Http.IFormFile,CampusTrade.API.Services.File.FileType,System.Boolean)">
            <summary>
            上传文件
            </summary>
            <param name="file">文件</param>
            <param name="fileType">文件类型</param>
            <param name="generateThumbnail">是否生成缩略图</param>
            <returns>文件信息</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.DownloadFileAsync(System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件流</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.DownloadFileByUrlAsync(System.String)">
            <summary>
            通过URL下载文件
            </summary>
            <param name="fileUrl">文件URL</param>
            <returns>文件流</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.DeleteFileAsync(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.DeleteFileByUrlAsync(System.String)">
            <summary>
            通过URL删除文件
            </summary>
            <param name="fileUrl">文件URL</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.FileExistsAsync(System.String)">
            <summary>
            检查文件是否存在
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.FileExistsByUrlAsync(System.String)">
            <summary>
            通过URL检查文件是否存在
            </summary>
            <param name="fileUrl">文件URL</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.GetFileInfoAsync(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="fileName">文件名</param>
            <returns>文件信息</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.GetFileInfoByUrlAsync(System.String)">
            <summary>
            通过URL获取文件信息
            </summary>
            <param name="fileUrl">文件URL</param>
            <returns>文件信息</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.ExtractFileNameFromUrl(System.String)">
            <summary>
            从文件URL提取文件名
            </summary>
            <param name="fileUrl">文件URL</param>
            <returns>文件名</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.ExtractFileTypeFromUrl(System.String)">
            <summary>
            从文件URL提取文件类型
            </summary>
            <param name="fileUrl">文件URL</param>
            <returns>文件类型</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.GetThumbnailFileName(System.String)">
            <summary>
            获取缩略图文件名
            </summary>
            <param name="originalFileName">原始文件名</param>
            <returns>缩略图文件名</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.GenerateUniqueFileName(System.String)">
            <summary>
            生成唯一文件名
            </summary>
            <param name="originalFileName">原始文件名</param>
            <returns>唯一文件名</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.ValidateFileType(Microsoft.AspNetCore.Http.IFormFile,System.String[])">
            <summary>
            验证文件类型
            </summary>
            <param name="file">文件</param>
            <param name="allowedTypes">允许的文件类型</param>
            <returns>是否有效</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IFileService.GetAllFilesAsync(System.Nullable{CampusTrade.API.Services.File.FileType})">
            <summary>
            获取所有文件列表
            </summary>
            <param name="fileType">文件类型（可选，为null时返回所有类型）</param>
            <returns>文件列表结果</returns>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileType">
            <summary>
            文件类型枚举
            </summary>
        </member>
        <member name="F:CampusTrade.API.Services.File.FileType.ProductImage">
            <summary>
            商品图片
            </summary>
        </member>
        <member name="F:CampusTrade.API.Services.File.FileType.ReportEvidence">
            <summary>
            举报证据
            </summary>
        </member>
        <member name="F:CampusTrade.API.Services.File.FileType.UserAvatar">
            <summary>
            用户头像
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileUploadResult">
            <summary>
            文件上传结果
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileUploadResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileUploadResult.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileUploadResult.FileUrl">
            <summary>
            文件URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileUploadResult.ThumbnailFileName">
            <summary>
            缩略图文件名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileUploadResult.ThumbnailUrl">
            <summary>
            缩略图URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileUploadResult.FileSize">
            <summary>
            文件大小（字节）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileUploadResult.ContentType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileUploadResult.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileDownloadResult">
            <summary>
            文件下载结果
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileDownloadResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileDownloadResult.FileStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileDownloadResult.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileDownloadResult.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileDownloadResult.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileInfoItem">
            <summary>
            文件信息项
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.FileUrl">
            <summary>
            文件URL
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.FileType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.FileSize">
            <summary>
            文件大小（字节）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.ModifiedAt">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.Extension">
            <summary>
            文件扩展名
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.ThumbnailFileName">
            <summary>
            缩略图文件名（如果有）
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileInfoItem.ThumbnailUrl">
            <summary>
            缩略图URL（如果有）
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.FileListResult">
            <summary>
            文件列表结果
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileListResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileListResult.Files">
            <summary>
            文件列表
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileListResult.TotalCount">
            <summary>
            文件总数
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileListResult.FileTypeStats">
            <summary>
            按文件类型分组的统计
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.File.FileListResult.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.File.IThumbnailService">
            <summary>
            缩略图生成服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.IThumbnailService.GenerateThumbnailAsync(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalFilePath">原始文件路径</param>
            <param name="thumbnailFilePath">缩略图文件路径</param>
            <param name="maxWidth">最大宽度</param>
            <param name="maxHeight">最大高度</param>
            <param name="quality">质量(1-100)</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IThumbnailService.GenerateThumbnailFromStreamAsync(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            从流生成缩略图
            </summary>
            <param name="originalStream">原始文件流</param>
            <param name="thumbnailFilePath">缩略图文件路径</param>
            <param name="maxWidth">最大宽度</param>
            <param name="maxHeight">最大高度</param>
            <param name="quality">质量(1-100)</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CampusTrade.API.Services.File.IThumbnailService.IsImageFormat(System.String)">
            <summary>
            检查是否为支持的图片格式
            </summary>
            <param name="fileName">文件名</param>
            <returns>是否支持</returns>
        </member>
        <member name="T:CampusTrade.API.Services.File.ThumbnailService">
            <summary>
            缩略图生成服务实现
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.ThumbnailService.GenerateThumbnailAsync(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成缩略图
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.ThumbnailService.GenerateThumbnailFromStreamAsync(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            从流生成缩略图
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.ThumbnailService.GenerateThumbnailInternal(SixLabors.ImageSharp.Image,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            内部缩略图生成逻辑
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.ThumbnailService.CalculateThumbnailSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            计算缩略图尺寸
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.File.ThumbnailService.IsImageFormat(System.String)">
            <summary>
            检查是否为支持的图片格式
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Interfaces.ICacheService">
            <summary>
            内存缓存服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.GetOrCreateAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            获取或创建缓存项
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.GetAsync``1(System.String)">
            <summary>
            获取缓存值
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.GetAllAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量获取多个键的缓存值
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.SetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            设置缓存值
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.RemoveAsync(System.String)">
            <summary>
            删除缓存项
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.ExistsAsync(System.String)">
            <summary>
            检查缓存是否存在
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.RemoveByPrefixAsync(System.String)">
            <summary>
            按前缀批量删除
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.ClearAllAsync">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.RefreshAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            更新缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.GetHitRate">
            <summary>
            获取缓存命中率
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.GetExpirationInfo(System.String[])">
            <summary>
            获取缓存命中率
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.RemoveAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            失效all缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICacheService.GetKeysByPrefixAsync(System.String)">
            <summary>
            前缀获得缓存内容
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Interfaces.ICategoryCacheService">
            <summary>
            分类tree缓存服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICategoryCacheService.GetCategoryTreeAsync">
            <summary>
            获取完整的分类树（唯一缓存入口）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICategoryCacheService.RefreshCategoryTreeAsync">
            <summary>
            强制刷新分类树缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ICategoryCacheService.InvalidateCategoryTreeCacheAsync">
            <summary>
            使分类树缓存失效(仅清除缓存，不重建)
            </summary>    
        </member>
        <member name="T:CampusTrade.API.Services.Interfaces.IProductCacheService">
            <summary>
            商品缓存服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.GetProductAsync(System.Int32)">
            <summary>
            获取单个产品信息缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.SetProductAsync(CampusTrade.API.Models.Entities.Product)">
            <summary>
            设置产品信息缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.GetProductsAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            批量获取产品缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.GetProductsByCategoryAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取分类产品列表缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.GetProductsByUserAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取用户产品列表缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.RemoveAllProductDataAsync(System.Int32)">
            <summary>
            移除产品所有相关缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.RefreshCategoryProductsAsync(System.Int32)">
            <summary>
            刷新分类产品列表缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.GetHitRate">
            <summary>
            获取缓存命中率统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.InvalidateProductCacheAsync(System.Int32)">
            <summary>
            失效指定产品的所有缓存数据
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.InvalidateProductsByCategoryAsync(System.Int32)">
            <summary>
            失效指定分类下的所有产品缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.GetActiveCategoryIdsAsync">
            <summary>
            获得所有在售目录ID
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IProductCacheService.RefreshAllActiveProductsAsync">
            <summary>
            更新所有在售缓存
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService">
            <summary>
            系统配置缓存服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.GetConfigAsync(System.String)">
            <summary>
            获取系统配置缓存
            </summary>
            <param name="configName">配置名称</param>
            <returns>配置值</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.SetConfigAsync(System.String,System.String)">
            <summary>
            设置系统配置缓存
            </summary>
            <param name="configName">配置名称</param>
            <param name="configValue">配置值</param>
            <returns></returns>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.RemoveConfigAsync(System.String)">
            <summary>
            移除系统配置缓存
            </summary>
            <param name="configName">配置名称</param>
            <returns></returns>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.GetJwtOptionsAsync">
            <summary>
            获取JWT配置
            </summary>
            <returns>JWT配置对象</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.GetCacheOptionsAsync">
            <summary>
            获取缓存配置
            </summary>
            <returns>缓存配置对象</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.GetAppSettingsJsonAsync">
            <summary>
            获取应用设置JSON内容
            </summary>
            <returns>完整的appsettings.json内容</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.GetHitRate">
            <summary>
            获取缓存命中率统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.InvalidateAllConfigsAsync">
            <summary>
            失效全部系统配置缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.RefreshJwtOptionsAsync">
            <summary>
            刷新JWT配置缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.ISystemConfigCacheService.RefreshCacheOptionsAsync">
            <summary>
            刷新缓存配置
            </summary>
        </member>
        <member name="T:CampusTrade.API.Services.Interfaces.IUserCacheService">
            <summary>
            用户缓存服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.GetUserAsync(System.Int32)">
            <summary>
            获取完整用户信息缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.GetUserByUsernameAsync(System.String)">
            <summary>
            根据用户名或邮箱获取用户信息（带学生信息）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.SetUserAsync(CampusTrade.API.Models.Entities.User)">
            <summary>
            设置用户信息缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.SetUserByUsernameAsync(System.String,CampusTrade.API.Models.Entities.User)">
            <summary>
            设置根据用户名/邮箱查询的用户缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.ValidateStudentAsync(System.String,System.String)">
            <summary>
            验证学生身份（带缓存）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.SetStudentValidationAsync(System.String,System.String,System.Boolean)">
            <summary>
            设置学生验证结果缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.GetSecurityInfoAsync(System.Int32)">
            <summary>
            获取用户安全信息缓存（包含登录状态等敏感字段）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.GetPermissionsAsync(System.Int32)">
            <summary>
            获取用户权限缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.RefreshPermissionsAsync(System.Int32)">
            <summary>
            刷新用户权限缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.RefreshSecurityAsync(System.Int32)">
            <summary>
            刷新用户安全信息缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.RefreshUserAsync(System.Int32)">
            <summary>
            刷新用户信息缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.RemoveAllUserDataAsync(System.Int32)">
            <summary>
            移除用户所有相关缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.GetUsersAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            批量获取用户缓存
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.GetBasicInfoAsync(System.Int32)">
            <summary>
            获取用户基础信息（不包含敏感字段）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.GetHitRate">
            <summary>
            获取缓存命中率统计
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.InvalidateUserCacheAsync(System.Int32)">
            <summary>
            失效指定用户的所有缓存数据
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.InvalidateUsersCacheAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            批量失效多个用户的缓存数据
            </summary>
            <param name="userIds">用户ID集合</param>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.InvalidateUserSecurityCacheAsync(System.Int32)">
            <summary>
            失效用户安全信息缓存
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.InvalidateUserPermissionsCacheAsync(System.Int32)">
            <summary>
            失效用户权限缓存
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.InvalidateUsernameQueryCacheAsync(System.String)">
            <summary>
            失效用户名/邮箱查询缓存
            </summary>
            <param name="username">用户名或邮箱</param>
        </member>
        <member name="M:CampusTrade.API.Services.Interfaces.IUserCacheService.InvalidateStudentValidationCacheAsync(System.String,System.String)">
            <summary>
            失效学生验证缓存
            </summary>
            <param name="studentId">学号</param>
            <param name="name">姓名</param>
        </member>
        <member name="T:CampusTrade.API.Services.Email.EmailService">
            <summary>
            邮件服务 - 负责发送电子邮件通知
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Email.EmailService.SendEmailAsync(System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="recipientEmail">收件人邮箱</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>发送结果</returns>
        </member>
        <member name="T:CampusTrade.API.Services.Product.IProductService">
            <summary>
            商品服务接口
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.CreateProductAsync(CampusTrade.API.Models.DTOs.Product.CreateProductDto,System.Int32)">
            <summary>
            发布商品
            </summary>
            <param name="createDto">创建商品请求DTO</param>
            <param name="userId">发布用户ID</param>
            <returns>商品详情</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.UpdateProductAsync(System.Int32,CampusTrade.API.Models.DTOs.Product.UpdateProductDto,System.Int32)">
            <summary>
            更新商品信息
            </summary>
            <param name="productId">商品ID</param>
            <param name="updateDto">更新商品请求DTO</param>
            <param name="userId">操作用户ID</param>
            <returns>更新后的商品详情</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.DeleteProductAsync(System.Int32,System.Int32)">
            <summary>
            删除商品（下架）
            </summary>
            <param name="productId">商品ID</param>
            <param name="userId">操作用户ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetProductDetailAsync(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            获取商品详情
            </summary>
            <param name="productId">商品ID</param>
            <param name="currentUserId">当前用户ID（可选，用于判断是否为自己的商品）</param>
            <param name="increaseViewCount">是否增加浏览次数</param>
            <returns>商品详情</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.UpdateProductStatusAsync(System.Int32,System.String,System.Int32)">
            <summary>
            修改商品状态
            </summary>
            <param name="productId">商品ID</param>
            <param name="status">新状态</param>
            <param name="userId">操作用户ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetProductsAsync(CampusTrade.API.Models.DTOs.Product.ProductQueryDto,System.Nullable{System.Int32})">
            <summary>
            分页查询商品列表
            </summary>
            <param name="queryDto">查询条件</param>
            <param name="currentUserId">当前用户ID（可选）</param>
            <returns>分页商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetUserProductsAsync(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            获取用户发布的商品列表
            </summary>
            <param name="userId">用户ID</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="status">商品状态筛选（可选）</param>
            <returns>分页商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetPopularProductsAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取热门商品列表
            </summary>
            <param name="count">获取数量</param>
            <param name="categoryId">分类ID（可选）</param>
            <returns>热门商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.SearchProductsAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            搜索商品
            </summary>
            <param name="keyword">搜索关键词</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="categoryId">分类ID（可选）</param>
            <returns>搜索结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetCategoryTreeAsync(System.Boolean)">
            <summary>
            获取分类树
            </summary>
            <param name="includeProductCount">是否包含商品数量</param>
            <returns>分类树</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetCategoryBreadcrumbAsync(System.Int32)">
            <summary>
            获取分类面包屑导航
            </summary>
            <param name="categoryId">分类ID</param>
            <returns>面包屑导航</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetSubCategoriesAsync(System.Nullable{System.Int32})">
            <summary>
            根据父分类获取子分类列表
            </summary>
            <param name="parentId">父分类ID（null表示获取一级分类）</param>
            <returns>子分类列表</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetProductsByCategoryAsync(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取分类下的商品列表
            </summary>
            <param name="categoryId">分类ID</param>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">页大小</param>
            <param name="includeSubCategories">是否包含子分类的商品</param>
            <returns>分页商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.AddProductImagesAsync(System.Int32,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            为商品添加图片
            </summary>
            <param name="productId">商品ID</param>
            <param name="imageUrls">图片URL列表</param>
            <param name="userId">操作用户ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.RemoveProductImageAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            删除商品图片
            </summary>
            <param name="productId">商品ID</param>
            <param name="imageId">图片ID</param>
            <param name="userId">操作用户ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.UpdateProductImageOrderAsync(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            更新商品图片顺序
            </summary>
            <param name="productId">商品ID</param>
            <param name="imageOrders">图片ID和显示顺序的映射</param>
            <param name="userId">操作用户ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.GetProductsToAutoRemoveAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取即将自动下架的商品列表
            </summary>
            <param name="days">距离下架天数</param>
            <param name="userId">用户ID（可选，仅获取指定用户的商品）</param>
            <returns>即将下架的商品列表</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.ExtendProductAutoRemoveTimeAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            延期商品自动下架时间
            </summary>
            <param name="productId">商品ID</param>
            <param name="extendDays">延期天数</param>
            <param name="userId">操作用户ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.SetProductAutoRemoveTimeAsync(System.Int32,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            手动设置商品自动下架时间
            </summary>
            <param name="productId">商品ID</param>
            <param name="autoRemoveTime">自动下架时间</param>
            <param name="userId">操作用户ID</param>
            <returns>操作结果</returns>
        </member>
        <member name="M:CampusTrade.API.Services.Product.IProductService.ProcessAutoRemoveProductsAsync">
            <summary>
            处理自动下架商品（定时任务调用）
            </summary>
            <returns>处理结果统计</returns>
        </member>
        <member name="T:CampusTrade.API.Services.Product.ProductService">
            <summary>
            商品服务实现类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.CreateProductAsync(CampusTrade.API.Models.DTOs.Product.CreateProductDto,System.Int32)">
            <summary>
            发布商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.UpdateProductAsync(System.Int32,CampusTrade.API.Models.DTOs.Product.UpdateProductDto,System.Int32)">
            <summary>
            更新商品信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.DeleteProductAsync(System.Int32,System.Int32)">
            <summary>
            删除商品（下架）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetProductDetailAsync(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            获取商品详情
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.UpdateProductStatusAsync(System.Int32,System.String,System.Int32)">
            <summary>
            修改商品状态
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetProductsAsync(CampusTrade.API.Models.DTOs.Product.ProductQueryDto,System.Nullable{System.Int32})">
            <summary>
            分页查询商品列表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetUserProductsAsync(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            获取用户发布的商品列表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetPopularProductsAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取热门商品列表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.SearchProductsAsync(System.String,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            搜索商品
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetCategoryTreeAsync(System.Boolean)">
            <summary>
            获取分类树
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetCategoryBreadcrumbAsync(System.Int32)">
            <summary>
            获取分类面包屑导航
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetSubCategoriesAsync(System.Nullable{System.Int32})">
            <summary>
            根据父分类获取子分类列表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetProductsByCategoryAsync(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取分类下的商品列表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetProductsToAutoRemoveAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取即将自动下架的商品列表
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.ExtendProductAutoRemoveTimeAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            延期商品自动下架时间
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.SetProductAutoRemoveTimeAsync(System.Int32,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            手动设置商品自动下架时间
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.ProcessAutoRemoveProductsAsync">
            <summary>
            处理自动下架商品（由定时任务调用）
            智能下架逻辑：默认20天自动下架，高浏览量商品延期10天
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.ConvertToProductListDtosAsync(System.Collections.Generic.IEnumerable{CampusTrade.API.Models.Entities.Product},System.Nullable{System.Int32})">
            <summary>
            转换为商品列表DTO
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.ApplySorting(System.Collections.Generic.IEnumerable{CampusTrade.API.Models.DTOs.Product.ProductListDto},System.Nullable{CampusTrade.API.Models.DTOs.Product.ProductSortBy},System.Nullable{CampusTrade.API.Models.DTOs.Product.SortDirection})">
            <summary>
            应用排序
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetProductTags(CampusTrade.API.Models.Entities.Product)">
            <summary>
            获取商品标签
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.ConvertToCategoryDtosAsync(System.Collections.Generic.List{CampusTrade.API.Models.Entities.Category},System.Boolean)">
            <summary>
            转换分类实体为DTO
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.CountAllCategories(System.Collections.Generic.List{CampusTrade.API.Models.Entities.Category})">
            <summary>
            统计所有分类数量
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetCategoryLevel(CampusTrade.API.Models.Entities.Category)">
            <summary>
            获取分类层级
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetCategoryFullPath(System.Int32)">
            <summary>
            获取分类完整路径
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetCategoryBreadcrumbRecursive(System.Collections.Generic.List{CampusTrade.API.Models.Entities.Category},System.Int32,System.Collections.Generic.List{CampusTrade.API.Models.DTOs.Product.CategoryBreadcrumbItemDto},System.Int32)">
            <summary>
            递归获取分类面包屑导航
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetAllSubCategoryIds(CampusTrade.API.Models.Entities.Category,System.Collections.Generic.List{System.Int32})">
            <summary>
            获取所有子分类ID
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetProductDetailInternalAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            内部获取商品详情方法
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.AddProductImagesInternal(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            添加商品图片（内部方法）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.UpdateProductImagesInternal(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            更新商品图片（内部方法）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.FindCategoryById(System.Collections.Generic.List{CampusTrade.API.Models.Entities.Category},System.Int32)">
            <summary>
            根据ID查找分类
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetCategoryPath(System.Collections.Generic.List{CampusTrade.API.Models.Entities.Category},System.Int32)">
            <summary>
            获取分类路径
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetCategoryPathRecursive(System.Collections.Generic.List{CampusTrade.API.Models.Entities.Category},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            递归获取分类路径
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.Product.ProductService.GetValidUserInfoAsync(System.Int32)">
            <summary>
            获取有效的用户信息（处理NullUser情况）
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.ScheduledTasks.LogCleanupTask.#ctor(Microsoft.Extensions.Logging.ILogger{CampusTrade.API.Services.ScheduledTasks.LogCleanupTask},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            注入 IServiceScopeFactory 而非直接注入 DbContext
        </member>
        <member name="T:CampusTrade.API.Services.ScheduledTasks.ProductManagementTask">
            <summary>
            商品管理定时任务
            负责智能下架功能：默认20天自动下架，高浏览量商品延期10天
            </summary>
        </member>
        <member name="P:CampusTrade.API.Services.ScheduledTasks.ProductManagementTask.Interval">
            <summary>
            每天执行一次智能下架检查
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.ScheduledTasks.ProductManagementTask.ExecuteTaskAsync">
            <summary>
            执行商品管理任务
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.ScheduledTasks.ProductManagementTask.OnTaskErrorAsync(System.Exception)">
            <summary>
            任务执行出错时的处理
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.ScheduledTasks.ProductManagementTask.GetTaskStatus">
            <summary>
            获取任务状态信息
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.ScheduledTasks.ScheduledService.OnTaskErrorAsync(System.Exception)">
            <summary>
            任务执行出错时的处理方法，子类可重写
            </summary>
        </member>
        <member name="M:CampusTrade.API.Services.ScheduledTasks.ScheduledService.GetTaskStatus">
            <summary>
            获取任务状态信息
            </summary>
        </member>
    </members>
</doc>
